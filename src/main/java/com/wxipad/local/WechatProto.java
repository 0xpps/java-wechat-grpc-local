package com.wxipad.local;

import com.wxipad.wechat.tools.proto.*;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WechatProto.proto
public class WechatProto {

    public static class MicroMsgRequestNew extends ProtoMessage {

        public SKBuiltinString_t toUserName = null;//required(1)--SKBuiltinString_t
        public String content = null;//optional(2)--string
        public Integer type = null;//required(3)--uint32
        public Integer createTime = null;//required(4)--uint32
        public Integer clientMsgId = null;//required(5)--uint32
        public String msgSource = null;//optional(6)--string
        public Integer ctrlBit = null;//optional(7)--uint32

        public static MicroMsgRequestNew parse(byte[] data) {
            try {
                MicroMsgRequestNew obj = new MicroMsgRequestNew();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, toUserName);
            if (content != null) {
                _writer_.writeString(2, content);
            }
            _writer_.writeUInt32(3, type);
            _writer_.writeUInt32(4, createTime);
            _writer_.writeUInt32(5, clientMsgId);
            if (msgSource != null) {
                _writer_.writeString(6, msgSource);
            }
            if (ctrlBit != null) {
                _writer_.writeUInt32(7, ctrlBit);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                toUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                content = _reader_.readString();
            } else if (_field_ == 3) {
                type = _reader_.readUInt32();
            } else if (_field_ == 4) {
                createTime = _reader_.readUInt32();
            } else if (_field_ == 5) {
                clientMsgId = _reader_.readUInt32();
            } else if (_field_ == 6) {
                msgSource = _reader_.readString();
            } else if (_field_ == 7) {
                ctrlBit = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(toUserName, type, createTime, clientMsgId);
        }

    }

    public static class AddMsg extends ProtoMessage {
        public Long msgId = null;//required(1)--int64
        public SKBuiltinString_t fromUserName = null;//required(2)--SKBuiltinString_t
        public SKBuiltinString_t toUserName = null;//required(3)--SKBuiltinString_t
        public Integer msgType = null;//required(4)--int32
        public SKBuiltinString_t content = null;//required(5)--SKBuiltinString_t
        public Integer status = null;//required(6)--uint32
        public Integer imgStatus = null;//required(7)--uint32
        public SKBuiltinBuffer_t imgBuf = null;//required(8)--SKBuiltinBuffer_t
        public Integer createTime = null;//required(9)--uint32
        public String msgSource = null;//optional(10)--string
        public String pushContent = null;//optional(11)--string
        public Long newMsgId = null;//optional(12)--int64

        public static AddMsg parse(byte[] data) {
            try {
                AddMsg obj = new AddMsg();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeInt64(1, msgId);
            _writer_.writeMessage(2, fromUserName);
            _writer_.writeMessage(3, toUserName);
            _writer_.writeInt32(4, msgType);
            _writer_.writeMessage(5, content);
            _writer_.writeUInt32(6, status);
            _writer_.writeUInt32(7, imgStatus);
            _writer_.writeMessage(8, imgBuf);
            _writer_.writeUInt32(9, createTime);
            if (msgSource != null) {
                _writer_.writeString(10, msgSource);
            }
            if (pushContent != null) {
                _writer_.writeString(11, pushContent);
            }
            if (newMsgId != null) {
                _writer_.writeInt64(12, newMsgId);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                msgId = _reader_.readInt64();
            } else if (_field_ == 2) {
                fromUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                toUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                msgType = _reader_.readInt32();
            } else if (_field_ == 5) {
                content = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 6) {
                status = _reader_.readUInt32();
            } else if (_field_ == 7) {
                imgStatus = _reader_.readUInt32();
            } else if (_field_ == 8) {
                imgBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 9) {
                createTime = _reader_.readUInt32();
            } else if (_field_ == 10) {
                msgSource = _reader_.readString();
            } else if (_field_ == 11) {
                pushContent = _reader_.readString();
            } else if (_field_ == 12) {
                newMsgId = _reader_.readInt64();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(msgId, fromUserName, toUserName, msgType, content, status, imgStatus, imgBuf, createTime);
        }

    }
    public static class SendMsgRequestNew extends ProtoMessage {

        public final ProtoList<MicroMsgRequestNew> list = new ProtoList<MicroMsgRequestNew>(false);//optional(2)--MicroMsgRequestNew
        public Integer count = null;//required(1)--uint32

        public static SendMsgRequestNew parse(byte[] data) {
            try {
                SendMsgRequestNew obj = new SendMsgRequestNew();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt32(1, count);
            if (list != null && !list.isEmpty()) {
                _writer_.writeMessage(2, list);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                count = _reader_.readUInt32();
            } else if (_field_ == 2) {
                list.add(MicroMsgRequestNew.parse(_reader_.readByteArray()));
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(count);
        }


    }


    public static class NewSyncResponse extends ProtoMessage {

        public Integer ret = null;//required(1)--int32
        public CmdList cmdList = null;//required(2)--CmdList
        public Integer continueFlag = null;//required(3)--uint32
        public SKBuiltinBuffer_t keyBuf = null;//required(4)--SKBuiltinBuffer_t
        public Integer status = null;//optional(5)--uint32
        public Integer onlineVersion = null;//optional(6)--uint32
        public Integer utc = null;//optional(7)--uint32

        public static NewSyncResponse parse(byte[] data) {
            try {
                NewSyncResponse obj = new NewSyncResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeInt32(1, ret);
            _writer_.writeMessage(2, cmdList);
            _writer_.writeUInt32(3, continueFlag);
            _writer_.writeMessage(4, keyBuf);
            if (status != null) {
                _writer_.writeUInt32(5, status);
            }
            if (onlineVersion != null) {
                _writer_.writeUInt32(6, onlineVersion);
            }
            if (utc != null) {
                _writer_.writeUInt32(7, utc);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                ret = _reader_.readInt32();
            } else if (_field_ == 2) {
                cmdList = CmdList.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                continueFlag = _reader_.readUInt32();
            } else if (_field_ == 4) {
                keyBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                status = _reader_.readUInt32();
            } else if (_field_ == 6) {
                onlineVersion = _reader_.readUInt32();
            } else if (_field_ == 7) {
                utc = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(ret, cmdList, continueFlag, keyBuf);
        }

    }

    public static class CmdList extends ProtoMessage {

        public final ProtoList<CmdItem> list = new ProtoList<CmdItem>(false);//optional(2)--CmdItem
        public Integer count = null;//required(1)--uint32

        public static CmdList parse(byte[] data) {
            try {
                CmdList obj = new CmdList();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt32(1, count);
            if (list != null && !list.isEmpty()) {
                _writer_.writeMessage(2, list);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                count = _reader_.readUInt32();
            } else if (_field_ == 2) {
                list.add(CmdItem.parse(_reader_.readByteArray()));
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(count);
        }

    }

    public static class CmdItem extends ProtoMessage {

        public Integer cmdId = null;//required(1)--int32
        public SKBuiltinBuffer_t cmdBuf = null;//required(2)--SKBuiltinBuffer_t

        public static CmdItem parse(byte[] data) {
            try {
                CmdItem obj = new CmdItem();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeInt32(1, cmdId);
            _writer_.writeMessage(2, cmdBuf);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                cmdId = _reader_.readInt32();
            } else if (_field_ == 2) {
                cmdBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(cmdId, cmdBuf);
        }

    }


    public static class RoomInfo extends ProtoMessage {

        public SKBuiltinString_t userName = null;//required(1)--SKBuiltinString_t
        public SKBuiltinString_t nickName = null;//required(2)--SKBuiltinString_t

        public static RoomInfo parse(byte[] data) {
            try {
                RoomInfo obj = new RoomInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, userName);
            _writer_.writeMessage(2, nickName);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                userName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                nickName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(userName, nickName);
        }

    }


    public static class ModContact extends ProtoMessage {
        public final ProtoList<RoomInfo> roomInfoList = new ProtoList<RoomInfo>(false);//optional(15)--RoomInfo
        public SKBuiltinString_t userName = null;//required(1)--SKBuiltinString_t
        public SKBuiltinString_t nickName = null;//required(2)--SKBuiltinString_t
        public SKBuiltinString_t pYInitial = null;//required(3)--SKBuiltinString_t
        public SKBuiltinString_t quanPin = null;//required(4)--SKBuiltinString_t
        public Integer sex = null;//required(5)--int32
        public SKBuiltinBuffer_t imgBuf = null;//required(6)--SKBuiltinBuffer_t
        public Integer bitMask = null;//required(7)--uint32
        public Integer bitVal = null;//required(8)--uint32
        public Integer imgFlag = null;//required(9)--uint32
        public SKBuiltinString_t remark = null;//optional(10)--SKBuiltinString_t
        public SKBuiltinString_t remarkPYInitial = null;//optional(11)--SKBuiltinString_t
        public SKBuiltinString_t remarkQuanPin = null;//optional(12)--SKBuiltinString_t
        public Integer contactType = null;//optional(13)--uint32
        public Integer roomInfoCount = null;//optional(14)--uint32
        public SKBuiltinString_t domainList = null;//optional(16)--SKBuiltinString_t
        public Integer chatRoomNotify = null;//optional(17)--uint32
        public Integer addContactScene = null;//optional(18)--uint32
        public String province = null;//optional(19)--string
        public String city = null;//optional(20)--string
        public String signature = null;//optional(21)--string
        public Integer personalCard = null;//optional(22)--uint32
        public Integer hasWeiXinHdHeadImg = null;//optional(23)--uint32
        public Integer verifyFlag = null;//optional(24)--uint32
        public String verifyInfo = null;//optional(25)--string
        public Integer level = null;//optional(26)--int32
        public Integer source = null;//optional(27)--uint32
        public String weibo = null;//optional(28)--string
        public String verifyContent = null;//optional(29)--string
        public String alias = null;//optional(30)--string
        public String chatRoomOwner = null;//optional(31)--string
        public String weiboNickname = null;//optional(32)--string
        public Integer weiboFlag = null;//optional(33)--uint32
        public Integer albumStyle = null;//optional(34)--int32
        public Integer albumFlag = null;//optional(35)--int32
        public String albumBGImgID = null;//optional(36)--string
        public SnsUserInfo snsUserInfo = null;//optional(37)--SnsUserInfo
        public String country = null;//optional(38)--string
        public String bigHeadImgUrl = null;//optional(39)--string
        public String smallHeadImgUrl = null;//optional(40)--string
        public String myBrandList = null;//optional(41)--string
        public CustomizedInfo customizedInfo = null;//optional(42)--CustomizedInfo
        public String chatRoomData = null;//optional(43)--string
        public String headImgMd5 = null;//optional(44)--string
        public String encryptUserName = null;//optional(45)--string
        public String iDCardNum = null;//optional(46)--string
        public String realName = null;//optional(47)--string
        public String mobileHash = null;//optional(48)--string
        public String mobileFullHash = null;//optional(49)--string
        public AdditionalContactList additionalContactList = null;//optional(50)--AdditionalContactList
        public Integer chatroomVersion = null;//optional(53)--uint32
        public String extInfo = null;//optional(54)--string
        public Integer chatroomMaxCount = null;//optional(55)--uint32
        public Integer chatroomType = null;//optional(56)--uint32
        public ChatRoomMemberData newChatroomData = null;//optional(57)--ChatRoomMemberData
        public Integer deleteFlag = null;//optional(58)--int32
        public String description = null;//optional(59)--string
        public String cardImgUrl = null;//optional(60)--string
        public String labelIDList = null;//optional(61)--string

        public static ModContact parse(byte[] data) {
            try {
                ModContact obj = new ModContact();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, userName);
            _writer_.writeMessage(2, nickName);
            _writer_.writeMessage(3, pYInitial);
            _writer_.writeMessage(4, quanPin);
            _writer_.writeInt32(5, sex);
            _writer_.writeMessage(6, imgBuf);
            _writer_.writeUInt32(7, bitMask);
            _writer_.writeUInt32(8, bitVal);
            _writer_.writeUInt32(9, imgFlag);
            if (remark != null) {
                _writer_.writeMessage(10, remark);
            }
            if (remarkPYInitial != null) {
                _writer_.writeMessage(11, remarkPYInitial);
            }
            if (remarkQuanPin != null) {
                _writer_.writeMessage(12, remarkQuanPin);
            }
            if (contactType != null) {
                _writer_.writeUInt32(13, contactType);
            }
            if (roomInfoCount != null) {
                _writer_.writeUInt32(14, roomInfoCount);
            }
            if (roomInfoList != null && !roomInfoList.isEmpty()) {
                _writer_.writeMessage(15, roomInfoList);
            }
            if (domainList != null) {
                _writer_.writeMessage(16, domainList);
            }
            if (chatRoomNotify != null) {
                _writer_.writeUInt32(17, chatRoomNotify);
            }
            if (addContactScene != null) {
                _writer_.writeUInt32(18, addContactScene);
            }
            if (province != null) {
                _writer_.writeString(19, province);
            }
            if (city != null) {
                _writer_.writeString(20, city);
            }
            if (signature != null) {
                _writer_.writeString(21, signature);
            }
            if (personalCard != null) {
                _writer_.writeUInt32(22, personalCard);
            }
            if (hasWeiXinHdHeadImg != null) {
                _writer_.writeUInt32(23, hasWeiXinHdHeadImg);
            }
            if (verifyFlag != null) {
                _writer_.writeUInt32(24, verifyFlag);
            }
            if (verifyInfo != null) {
                _writer_.writeString(25, verifyInfo);
            }
            if (level != null) {
                _writer_.writeInt32(26, level);
            }
            if (source != null) {
                _writer_.writeUInt32(27, source);
            }
            if (weibo != null) {
                _writer_.writeString(28, weibo);
            }
            if (verifyContent != null) {
                _writer_.writeString(29, verifyContent);
            }
            if (alias != null) {
                _writer_.writeString(30, alias);
            }
            if (chatRoomOwner != null) {
                _writer_.writeString(31, chatRoomOwner);
            }
            if (weiboNickname != null) {
                _writer_.writeString(32, weiboNickname);
            }
            if (weiboFlag != null) {
                _writer_.writeUInt32(33, weiboFlag);
            }
            if (albumStyle != null) {
                _writer_.writeInt32(34, albumStyle);
            }
            if (albumFlag != null) {
                _writer_.writeInt32(35, albumFlag);
            }
            if (albumBGImgID != null) {
                _writer_.writeString(36, albumBGImgID);
            }
            if (snsUserInfo != null) {
                _writer_.writeMessage(37, snsUserInfo);
            }
            if (country != null) {
                _writer_.writeString(38, country);
            }
            if (bigHeadImgUrl != null) {
                _writer_.writeString(39, bigHeadImgUrl);
            }
            if (smallHeadImgUrl != null) {
                _writer_.writeString(40, smallHeadImgUrl);
            }
            if (myBrandList != null) {
                _writer_.writeString(41, myBrandList);
            }
            if (customizedInfo != null) {
                _writer_.writeMessage(42, customizedInfo);
            }
            if (chatRoomData != null) {
                _writer_.writeString(43, chatRoomData);
            }
            if (headImgMd5 != null) {
                _writer_.writeString(44, headImgMd5);
            }
            if (encryptUserName != null) {
                _writer_.writeString(45, encryptUserName);
            }
            if (iDCardNum != null) {
                _writer_.writeString(46, iDCardNum);
            }
            if (realName != null) {
                _writer_.writeString(47, realName);
            }
            if (mobileHash != null) {
                _writer_.writeString(48, mobileHash);
            }
            if (mobileFullHash != null) {
                _writer_.writeString(49, mobileFullHash);
            }
            if (additionalContactList != null) {
                _writer_.writeMessage(50, additionalContactList);
            }
            if (chatroomVersion != null) {
                _writer_.writeUInt32(53, chatroomVersion);
            }
            if (extInfo != null) {
                _writer_.writeString(54, extInfo);
            }
            if (chatroomMaxCount != null) {
                _writer_.writeUInt32(55, chatroomMaxCount);
            }
            if (chatroomType != null) {
                _writer_.writeUInt32(56, chatroomType);
            }
            if (newChatroomData != null) {
                _writer_.writeMessage(57, newChatroomData);
            }
            if (deleteFlag != null) {
                _writer_.writeInt32(58, deleteFlag);
            }
            if (description != null) {
                _writer_.writeString(59, description);
            }
            if (cardImgUrl != null) {
                _writer_.writeString(60, cardImgUrl);
            }
            if (labelIDList != null) {
                _writer_.writeString(61, labelIDList);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                userName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                nickName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                pYInitial = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                quanPin = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                sex = _reader_.readInt32();
            } else if (_field_ == 6) {
                imgBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 7) {
                bitMask = _reader_.readUInt32();
            } else if (_field_ == 8) {
                bitVal = _reader_.readUInt32();
            } else if (_field_ == 9) {
                imgFlag = _reader_.readUInt32();
            } else if (_field_ == 10) {
                remark = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 11) {
                remarkPYInitial = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 12) {
                remarkQuanPin = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 13) {
                contactType = _reader_.readUInt32();
            } else if (_field_ == 14) {
                roomInfoCount = _reader_.readUInt32();
            } else if (_field_ == 15) {
                roomInfoList.add(RoomInfo.parse(_reader_.readByteArray()));
            } else if (_field_ == 16) {
                domainList = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 17) {
                chatRoomNotify = _reader_.readUInt32();
            } else if (_field_ == 18) {
                addContactScene = _reader_.readUInt32();
            } else if (_field_ == 19) {
                province = _reader_.readString();
            } else if (_field_ == 20) {
                city = _reader_.readString();
            } else if (_field_ == 21) {
                signature = _reader_.readString();
            } else if (_field_ == 22) {
                personalCard = _reader_.readUInt32();
            } else if (_field_ == 23) {
                hasWeiXinHdHeadImg = _reader_.readUInt32();
            } else if (_field_ == 24) {
                verifyFlag = _reader_.readUInt32();
            } else if (_field_ == 25) {
                verifyInfo = _reader_.readString();
            } else if (_field_ == 26) {
                level = _reader_.readInt32();
            } else if (_field_ == 27) {
                source = _reader_.readUInt32();
            } else if (_field_ == 28) {
                weibo = _reader_.readString();
            } else if (_field_ == 29) {
                verifyContent = _reader_.readString();
            } else if (_field_ == 30) {
                alias = _reader_.readString();
            } else if (_field_ == 31) {
                chatRoomOwner = _reader_.readString();
            } else if (_field_ == 32) {
                weiboNickname = _reader_.readString();
            } else if (_field_ == 33) {
                weiboFlag = _reader_.readUInt32();
            } else if (_field_ == 34) {
                albumStyle = _reader_.readInt32();
            } else if (_field_ == 35) {
                albumFlag = _reader_.readInt32();
            } else if (_field_ == 36) {
                albumBGImgID = _reader_.readString();
            } else if (_field_ == 37) {
                snsUserInfo = SnsUserInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 38) {
                country = _reader_.readString();
            } else if (_field_ == 39) {
                bigHeadImgUrl = _reader_.readString();
            } else if (_field_ == 40) {
                smallHeadImgUrl = _reader_.readString();
            } else if (_field_ == 41) {
                myBrandList = _reader_.readString();
            } else if (_field_ == 42) {
                customizedInfo = CustomizedInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 43) {
                chatRoomData = _reader_.readString();
            } else if (_field_ == 44) {
                headImgMd5 = _reader_.readString();
            } else if (_field_ == 45) {
                encryptUserName = _reader_.readString();
            } else if (_field_ == 46) {
                iDCardNum = _reader_.readString();
            } else if (_field_ == 47) {
                realName = _reader_.readString();
            } else if (_field_ == 48) {
                mobileHash = _reader_.readString();
            } else if (_field_ == 49) {
                mobileFullHash = _reader_.readString();
            } else if (_field_ == 50) {
                additionalContactList = AdditionalContactList.parse(_reader_.readByteArray());
            } else if (_field_ == 53) {
                chatroomVersion = _reader_.readUInt32();
            } else if (_field_ == 54) {
                extInfo = _reader_.readString();
            } else if (_field_ == 55) {
                chatroomMaxCount = _reader_.readUInt32();
            } else if (_field_ == 56) {
                chatroomType = _reader_.readUInt32();
            } else if (_field_ == 57) {
                newChatroomData = ChatRoomMemberData.parse(_reader_.readByteArray());
            } else if (_field_ == 58) {
                deleteFlag = _reader_.readInt32();
            } else if (_field_ == 59) {
                description = _reader_.readString();
            } else if (_field_ == 60) {
                cardImgUrl = _reader_.readString();
            } else if (_field_ == 61) {
                labelIDList = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(userName, nickName, pYInitial, quanPin, sex, imgBuf, bitMask, bitVal, imgFlag);
        }

    }

    public static class SnsUserInfo extends ProtoMessage {

        public Integer snsFlag = null;//required(1)--uint32
        public String snsBGImgID = null;//optional(2)--string
        public Long snsBGObjectID = null;//optional(3)--uint64
        public Integer snsFlagEx = null;//optional(4)--uint32

        public static SnsUserInfo parse(byte[] data) {
            try {
                SnsUserInfo obj = new SnsUserInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt32(1, snsFlag);
            if (snsBGImgID != null) {
                _writer_.writeString(2, snsBGImgID);
            }
            if (snsBGObjectID != null) {
                _writer_.writeUInt64(3, snsBGObjectID);
            }
            if (snsFlagEx != null) {
                _writer_.writeUInt32(4, snsFlagEx);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                snsFlag = _reader_.readUInt32();
            } else if (_field_ == 2) {
                snsBGImgID = _reader_.readString();
            } else if (_field_ == 3) {
                snsBGObjectID = _reader_.readUInt64();
            } else if (_field_ == 4) {
                snsFlagEx = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(snsFlag);
        }

    }

    public static class CustomizedInfo extends ProtoMessage {

        public Integer brandFlag = null;//required(1)--uint32
        public String externalInfo = null;//optional(2)--string
        public String brandInfo = null;//optional(3)--string
        public String brandIconURL = null;//optional(4)--string

        public static CustomizedInfo parse(byte[] data) {
            try {
                CustomizedInfo obj = new CustomizedInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt32(1, brandFlag);
            if (externalInfo != null) {
                _writer_.writeString(2, externalInfo);
            }
            if (brandInfo != null) {
                _writer_.writeString(3, brandInfo);
            }
            if (brandIconURL != null) {
                _writer_.writeString(4, brandIconURL);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                brandFlag = _reader_.readUInt32();
            } else if (_field_ == 2) {
                externalInfo = _reader_.readString();
            } else if (_field_ == 3) {
                brandInfo = _reader_.readString();
            } else if (_field_ == 4) {
                brandIconURL = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(brandFlag);
        }

    }

    public static class AdditionalContactList extends ProtoMessage {

        public LinkedinContactItem linkedinContactItem = null;//optional(1)--LinkedinContactItem

        public static AdditionalContactList parse(byte[] data) {
            try {
                AdditionalContactList obj = new AdditionalContactList();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (linkedinContactItem != null) {
                _writer_.writeMessage(1, linkedinContactItem);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                linkedinContactItem = LinkedinContactItem.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class LinkedinContactItem extends ProtoMessage {

        public String linkedinName = null;//optional(1)--string
        public String linkedinMemberID = null;//optional(2)--string
        public String linkedinPublicUrl = null;//optional(3)--string

        public static LinkedinContactItem parse(byte[] data) {
            try {
                LinkedinContactItem obj = new LinkedinContactItem();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (linkedinName != null) {
                _writer_.writeString(1, linkedinName);
            }
            if (linkedinMemberID != null) {
                _writer_.writeString(2, linkedinMemberID);
            }
            if (linkedinPublicUrl != null) {
                _writer_.writeString(3, linkedinPublicUrl);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                linkedinName = _reader_.readString();
            } else if (_field_ == 2) {
                linkedinMemberID = _reader_.readString();
            } else if (_field_ == 3) {
                linkedinPublicUrl = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class ChatRoomMemberData extends ProtoMessage {

        public final ProtoList<ChatRoomMemberInfo> chatRoomMember = new ProtoList<ChatRoomMemberInfo>(false);//optional(2)--ChatRoomMemberInfo
        public Integer memberCount = null;//required(1)--uint32
        public Integer infoMask = null;//optional(3)--uint32

        public static ChatRoomMemberData parse(byte[] data) {
            try {
                ChatRoomMemberData obj = new ChatRoomMemberData();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt32(1, memberCount);
            if (chatRoomMember != null && !chatRoomMember.isEmpty()) {
                _writer_.writeMessage(2, chatRoomMember);
            }
            if (infoMask != null) {
                _writer_.writeUInt32(3, infoMask);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                memberCount = _reader_.readUInt32();
            } else if (_field_ == 2) {
                chatRoomMember.add(ChatRoomMemberInfo.parse(_reader_.readByteArray()));
            } else if (_field_ == 3) {
                infoMask = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(memberCount);
        }

    }

    public static class ChatRoomMemberInfo extends ProtoMessage {

        public String userName = null;//optional(1)--string
        public String nickName = null;//optional(2)--string
        public String displayName = null;//optional(3)--string
        public String bigHeadImgUrl = null;//optional(4)--string
        public String smallHeadImgUrl = null;//optional(5)--string
        public Integer chatroomMemberFlag = null;//required(6)--uint32
        public String inviteUser = null;//optional(7)--string

        public static ChatRoomMemberInfo parse(byte[] data) {
            try {
                ChatRoomMemberInfo obj = new ChatRoomMemberInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (userName != null) {
                _writer_.writeString(1, userName);
            }
            if (nickName != null) {
                _writer_.writeString(2, nickName);
            }
            if (displayName != null) {
                _writer_.writeString(3, displayName);
            }
            if (bigHeadImgUrl != null) {
                _writer_.writeString(4, bigHeadImgUrl);
            }
            if (smallHeadImgUrl != null) {
                _writer_.writeString(5, smallHeadImgUrl);
            }
            _writer_.writeUInt32(6, chatroomMemberFlag);
            if (inviteUser != null) {
                _writer_.writeString(7, inviteUser);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                userName = _reader_.readString();
            } else if (_field_ == 2) {
                nickName = _reader_.readString();
            } else if (_field_ == 3) {
                displayName = _reader_.readString();
            } else if (_field_ == 4) {
                bigHeadImgUrl = _reader_.readString();
            } else if (_field_ == 5) {
                smallHeadImgUrl = _reader_.readString();
            } else if (_field_ == 6) {
                chatroomMemberFlag = _reader_.readUInt32();
            } else if (_field_ == 7) {
                inviteUser = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(chatroomMemberFlag);
        }

    }

    public static class MicroMsgResponseNew extends ProtoMessage {

        public Integer ret = null;//required(1)--int32
        public SKBuiltinString_t toUserName = null;//required(2)--SKBuiltinString_t
        public Integer msgId = null;//required(3)--uint32
        public Integer clientMsgId = null;//required(4)--uint32
        public Integer createTime = null;//required(5)--uint32
        public Integer serverTime = null;//required(6)--uint32
        public Integer type = null;//required(7)--uint32
        public Long newMsgId = null;//optional(8)--uint64

        public static MicroMsgResponseNew parse(byte[] data) {
            try {
                MicroMsgResponseNew obj = new MicroMsgResponseNew();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeInt32(1, ret);
            _writer_.writeMessage(2, toUserName);
            _writer_.writeUInt32(3, msgId);
            _writer_.writeUInt32(4, clientMsgId);
            _writer_.writeUInt32(5, createTime);
            _writer_.writeUInt32(6, serverTime);
            _writer_.writeUInt32(7, type);
            if (newMsgId != null) {
                _writer_.writeUInt64(8, newMsgId);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                ret = _reader_.readInt32();
            } else if (_field_ == 2) {
                toUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                msgId = _reader_.readUInt32();
            } else if (_field_ == 4) {
                clientMsgId = _reader_.readUInt32();
            } else if (_field_ == 5) {
                createTime = _reader_.readUInt32();
            } else if (_field_ == 6) {
                serverTime = _reader_.readUInt32();
            } else if (_field_ == 7) {
                type = _reader_.readUInt32();
            } else if (_field_ == 8) {
                newMsgId = _reader_.readUInt64();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(ret, toUserName, msgId, clientMsgId, createTime, serverTime, type);
        }

    }

    public static class SendMsgResponseNew extends ProtoMessage {
        public final ProtoList<MicroMsgResponseNew> list = new ProtoList<MicroMsgResponseNew>(false);//optional(3)--MicroMsgResponseNew
        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public Integer count = null;//required(2)--uint32
        public static SendMsgResponseNew parse(byte[] data) {
            try {
                SendMsgResponseNew obj = new SendMsgResponseNew();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeUInt32(2, count);
            if (list != null && !list.isEmpty()) {
                _writer_.writeMessage(3, list);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                count = _reader_.readUInt32();
            } else if (_field_ == 3) {
                list.add(MicroMsgResponseNew.parse(_reader_.readByteArray()));
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, count);
        }

    }

    public static class TwitterInfo extends ProtoMessage {

        public String oauthToken = null;//optional(1)--string
        public String oauthTokenSecret = null;//optional(2)--string

        public static TwitterInfo parse(byte[] data) {
            try {
                TwitterInfo obj = new TwitterInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (oauthToken != null) {
                _writer_.writeString(1, oauthToken);
            }
            if (oauthTokenSecret != null) {
                _writer_.writeString(2, oauthTokenSecret);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                oauthToken = _reader_.readString();
            } else if (_field_ == 2) {
                oauthTokenSecret = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class SnsBufferUrl extends ProtoMessage {

        public String url = null;//optional(1)--string
        public Integer type = null;//required(2)--uint32

        public static SnsBufferUrl parse(byte[] data) {
            try {
                SnsBufferUrl obj = new SnsBufferUrl();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (url != null) {
                _writer_.writeString(1, url);
            }
            _writer_.writeUInt32(2, type);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                url = _reader_.readString();
            } else if (_field_ == 2) {
                type = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(type);
        }

    }

    public static class SnsCommentInfo extends ProtoMessage {

        public String username = null;//optional(1)--string
        public String nickname = null;//optional(2)--string
        public Integer source = null;//required(3)--uint32
        public Integer type = null;//required(4)--uint32
        public String content = null;//optional(5)--string
        public Integer createTime = null;//required(6)--uint32
        public Integer commentId = null;//optional(7)--int32
        public Integer replyCommentId = null;//optional(8)--int32
        public String replyUsername = null;//optional(9)--string
        public Integer isNotRichText = null;//optional(10)--uint32
        public Long replyCommentId2 = null;//optional(11)--uint64
        public Long commentId2 = null;//optional(12)--uint64
        public Integer deleteFlag = null;//optional(13)--uint32

        public static SnsCommentInfo parse(byte[] data) {
            try {
                SnsCommentInfo obj = new SnsCommentInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (username != null) {
                _writer_.writeString(1, username);
            }
            if (nickname != null) {
                _writer_.writeString(2, nickname);
            }
            _writer_.writeUInt32(3, source);
            _writer_.writeUInt32(4, type);
            if (content != null) {
                _writer_.writeString(5, content);
            }
            _writer_.writeUInt32(6, createTime);
            if (commentId != null) {
                _writer_.writeInt32(7, commentId);
            }
            if (replyCommentId != null) {
                _writer_.writeInt32(8, replyCommentId);
            }
            if (replyUsername != null) {
                _writer_.writeString(9, replyUsername);
            }
            if (isNotRichText != null) {
                _writer_.writeUInt32(10, isNotRichText);
            }
            if (replyCommentId2 != null) {
                _writer_.writeUInt64(11, replyCommentId2);
            }
            if (commentId2 != null) {
                _writer_.writeUInt64(12, commentId2);
            }
            if (deleteFlag != null) {
                _writer_.writeUInt32(13, deleteFlag);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                username = _reader_.readString();
            } else if (_field_ == 2) {
                nickname = _reader_.readString();
            } else if (_field_ == 3) {
                source = _reader_.readUInt32();
            } else if (_field_ == 4) {
                type = _reader_.readUInt32();
            } else if (_field_ == 5) {
                content = _reader_.readString();
            } else if (_field_ == 6) {
                createTime = _reader_.readUInt32();
            } else if (_field_ == 7) {
                commentId = _reader_.readInt32();
            } else if (_field_ == 8) {
                replyCommentId = _reader_.readInt32();
            } else if (_field_ == 9) {
                replyUsername = _reader_.readString();
            } else if (_field_ == 10) {
                isNotRichText = _reader_.readUInt32();
            } else if (_field_ == 11) {
                replyCommentId2 = _reader_.readUInt64();
            } else if (_field_ == 12) {
                commentId2 = _reader_.readUInt64();
            } else if (_field_ == 13) {
                deleteFlag = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(source, type, createTime);
        }

    }

    public static class SnsGroup extends ProtoMessage {

        public Long groupId = null;//required(1)--uint64

        public static SnsGroup parse(byte[] data) {
            try {
                SnsGroup obj = new SnsGroup();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt64(1, groupId);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                groupId = _reader_.readUInt64();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(groupId);
        }

    }

    public static class SnsObject extends ProtoMessage {

        public final ProtoList<SnsCommentInfo> likeUserList = new ProtoList<SnsCommentInfo>(false);//optional(9)--SnsCommentInfo
        public final ProtoList<SnsCommentInfo> commentUserList = new ProtoList<SnsCommentInfo>(false);//optional(12)--SnsCommentInfo
        public final ProtoList<SnsCommentInfo> withUserList = new ProtoList<SnsCommentInfo>(false);//optional(15)--SnsCommentInfo
        public final ProtoList<SnsGroup> groupList = new ProtoList<SnsGroup>(false);//optional(19)--SnsGroup
        public final ProtoList<SKBuiltinString_t> blackList = new ProtoList<SKBuiltinString_t>(false);//optional(24)--SKBuiltinString_t
        public final ProtoList<SKBuiltinString_t> groupUser = new ProtoList<SKBuiltinString_t>(false);//optional(27)--SKBuiltinString_t
        public Long id = null;//required(1)--uint64
        public String username = null;//optional(2)--string
        public String nickname = null;//optional(3)--string
        public Integer createTime = null;//required(4)--uint32
        public SKBuiltinBuffer_t objectDesc = null;//required(5)--SKBuiltinBuffer_t
        public Integer likeFlag = null;//required(6)--uint32
        public Integer likeCount = null;//required(7)--uint32
        public Integer likeUserListCount = null;//required(8)--uint32
        public Integer commentCount = null;//required(10)--uint32
        public Integer commentUserListCount = null;//required(11)--uint32
        public Integer withUserCount = null;//required(13)--uint32
        public Integer withUserListCount = null;//required(14)--uint32
        public Integer extFlag = null;//optional(16)--uint32
        public Integer noChange = null;//optional(17)--uint32
        public Integer groupCount = null;//optional(18)--uint32
        public Integer isNotRichText = null;//optional(20)--uint32
        public String referUsername = null;//optional(21)--string
        public Long referId = null;//optional(22)--uint64
        public Integer blackListCount = null;//optional(23)--uint32
        public Integer deleteFlag = null;//optional(25)--uint32
        public Integer groupUserCount = null;//optional(26)--uint32

        public static SnsObject parse(byte[] data) {
            try {
                SnsObject obj = new SnsObject();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt64(1, id);
            if (username != null) {
                _writer_.writeString(2, username);
            }
            if (nickname != null) {
                _writer_.writeString(3, nickname);
            }
            _writer_.writeUInt32(4, createTime);
            _writer_.writeMessage(5, objectDesc);
            _writer_.writeUInt32(6, likeFlag);
            _writer_.writeUInt32(7, likeCount);
            _writer_.writeUInt32(8, likeUserListCount);
            if (likeUserList != null && !likeUserList.isEmpty()) {
                _writer_.writeMessage(9, likeUserList);
            }
            _writer_.writeUInt32(10, commentCount);
            _writer_.writeUInt32(11, commentUserListCount);
            if (commentUserList != null && !commentUserList.isEmpty()) {
                _writer_.writeMessage(12, commentUserList);
            }
            _writer_.writeUInt32(13, withUserCount);
            _writer_.writeUInt32(14, withUserListCount);
            if (withUserList != null && !withUserList.isEmpty()) {
                _writer_.writeMessage(15, withUserList);
            }
            if (extFlag != null) {
                _writer_.writeUInt32(16, extFlag);
            }
            if (noChange != null) {
                _writer_.writeUInt32(17, noChange);
            }
            if (groupCount != null) {
                _writer_.writeUInt32(18, groupCount);
            }
            if (groupList != null && !groupList.isEmpty()) {
                _writer_.writeMessage(19, groupList);
            }
            if (isNotRichText != null) {
                _writer_.writeUInt32(20, isNotRichText);
            }
            if (referUsername != null) {
                _writer_.writeString(21, referUsername);
            }
            if (referId != null) {
                _writer_.writeUInt64(22, referId);
            }
            if (blackListCount != null) {
                _writer_.writeUInt32(23, blackListCount);
            }
            if (blackList != null && !blackList.isEmpty()) {
                _writer_.writeMessage(24, blackList);
            }
            if (deleteFlag != null) {
                _writer_.writeUInt32(25, deleteFlag);
            }
            if (groupUserCount != null) {
                _writer_.writeUInt32(26, groupUserCount);
            }
            if (groupUser != null && !groupUser.isEmpty()) {
                _writer_.writeMessage(27, groupUser);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                id = _reader_.readUInt64();
            } else if (_field_ == 2) {
                username = _reader_.readString();
            } else if (_field_ == 3) {
                nickname = _reader_.readString();
            } else if (_field_ == 4) {
                createTime = _reader_.readUInt32();
            } else if (_field_ == 5) {
                objectDesc = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 6) {
                likeFlag = _reader_.readUInt32();
            } else if (_field_ == 7) {
                likeCount = _reader_.readUInt32();
            } else if (_field_ == 8) {
                likeUserListCount = _reader_.readUInt32();
            } else if (_field_ == 9) {
                likeUserList.add(SnsCommentInfo.parse(_reader_.readByteArray()));
            } else if (_field_ == 10) {
                commentCount = _reader_.readUInt32();
            } else if (_field_ == 11) {
                commentUserListCount = _reader_.readUInt32();
            } else if (_field_ == 12) {
                commentUserList.add(SnsCommentInfo.parse(_reader_.readByteArray()));
            } else if (_field_ == 13) {
                withUserCount = _reader_.readUInt32();
            } else if (_field_ == 14) {
                withUserListCount = _reader_.readUInt32();
            } else if (_field_ == 15) {
                withUserList.add(SnsCommentInfo.parse(_reader_.readByteArray()));
            } else if (_field_ == 16) {
                extFlag = _reader_.readUInt32();
            } else if (_field_ == 17) {
                noChange = _reader_.readUInt32();
            } else if (_field_ == 18) {
                groupCount = _reader_.readUInt32();
            } else if (_field_ == 19) {
                groupList.add(SnsGroup.parse(_reader_.readByteArray()));
            } else if (_field_ == 20) {
                isNotRichText = _reader_.readUInt32();
            } else if (_field_ == 21) {
                referUsername = _reader_.readString();
            } else if (_field_ == 22) {
                referId = _reader_.readUInt64();
            } else if (_field_ == 23) {
                blackListCount = _reader_.readUInt32();
            } else if (_field_ == 24) {
                blackList.add(SKBuiltinString_t.parse(_reader_.readByteArray()));
            } else if (_field_ == 25) {
                deleteFlag = _reader_.readUInt32();
            } else if (_field_ == 26) {
                groupUserCount = _reader_.readUInt32();
            } else if (_field_ == 27) {
                groupUser.add(SKBuiltinString_t.parse(_reader_.readByteArray()));
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(id, createTime, objectDesc, likeFlag, likeCount, likeUserListCount, commentCount, commentUserListCount, withUserCount, withUserListCount);
        }

    }

    public static class SnsPostCtocUploadInfo extends ProtoMessage {

        public Integer flag = null;//required(1)--uint32
        public Integer photoCount = null;//required(2)--uint32

        public static SnsPostCtocUploadInfo parse(byte[] data) {
            try {
                SnsPostCtocUploadInfo obj = new SnsPostCtocUploadInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt32(1, flag);
            _writer_.writeUInt32(2, photoCount);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                flag = _reader_.readUInt32();
            } else if (_field_ == 2) {
                photoCount = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(flag, photoCount);
        }

    }

    public static class SnsPostOperationFields extends ProtoMessage {

        public String shareUrlOriginal = null;//optional(1)--string
        public String shareUrlOpen = null;//optional(2)--string
        public String jsAppid = null;//optional(3)--string
        public Integer contactTagCount = null;//optional(4)--uint32
        public Integer tempUserCount = null;//optional(5)--uint32

        public static SnsPostOperationFields parse(byte[] data) {
            try {
                SnsPostOperationFields obj = new SnsPostOperationFields();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (shareUrlOriginal != null) {
                _writer_.writeString(1, shareUrlOriginal);
            }
            if (shareUrlOpen != null) {
                _writer_.writeString(2, shareUrlOpen);
            }
            if (jsAppid != null) {
                _writer_.writeString(3, jsAppid);
            }
            if (contactTagCount != null) {
                _writer_.writeUInt32(4, contactTagCount);
            }
            if (tempUserCount != null) {
                _writer_.writeUInt32(5, tempUserCount);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                shareUrlOriginal = _reader_.readString();
            } else if (_field_ == 2) {
                shareUrlOpen = _reader_.readString();
            } else if (_field_ == 3) {
                jsAppid = _reader_.readString();
            } else if (_field_ == 4) {
                contactTagCount = _reader_.readUInt32();
            } else if (_field_ == 5) {
                tempUserCount = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class SnsMediaType extends ProtoEnum {

        public static final int MMSNS_DATA_OK = 0;
        public static final int MMSNS_DATA_TEXT = 1;
        public static final int MMSNS_DATA_PHOTO = 2;
        public static final int MMSNS_DATA_VOICE = 3;
        public static final int MMSNS_DATA_VIDEO = 4;
        public static final int MMSNS_DATA_MUSIC = 5;
        public static final int MMSNS_DATA_SIGHT = 6;

        public static boolean check(int _value_) {
            return ProtoData.checkContain(_value_, MMSNS_DATA_OK, MMSNS_DATA_TEXT, MMSNS_DATA_PHOTO, MMSNS_DATA_VOICE, MMSNS_DATA_VIDEO, MMSNS_DATA_MUSIC, MMSNS_DATA_SIGHT);
        }

    }

    public static class MediaInfo extends ProtoMessage {

        public Integer source = null;//optional(1)--uint32
        public Integer mediaType = null;//optional(2)--SnsMediaType
        public Integer videoPlayLength = null;//optional(3)--uint32
        public String sessionId = null;//optional(4)--string
        public Integer startTime = null;//optional(5)--uint32

        public static MediaInfo parse(byte[] data) {
            try {
                MediaInfo obj = new MediaInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (source != null) {
                _writer_.writeUInt32(1, source);
            }
            if (mediaType != null) {
                _writer_.writeEnum(2, mediaType);
            }
            if (videoPlayLength != null) {
                _writer_.writeUInt32(3, videoPlayLength);
            }
            if (sessionId != null) {
                _writer_.writeString(4, sessionId);
            }
            if (startTime != null) {
                _writer_.writeUInt32(5, startTime);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                source = _reader_.readUInt32();
            } else if (_field_ == 2) {
                mediaType = _reader_.readEnum();
            } else if (_field_ == 3) {
                videoPlayLength = _reader_.readUInt32();
            } else if (_field_ == 4) {
                sessionId = _reader_.readString();
            } else if (_field_ == 5) {
                startTime = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class SnsWeAppInfo extends ProtoMessage {

        public String mapPoiId = null;//optional(1)--string
        public Integer appId = null;//optional(2)--uint32
        public String userName = null;//optional(3)--string
        public String redirectUrl = null;//optional(4)--string
        public Integer showType = null;//optional(5)--uint32
        public Integer score = null;//optional(6)--uint32

        public static SnsWeAppInfo parse(byte[] data) {
            try {
                SnsWeAppInfo obj = new SnsWeAppInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (mapPoiId != null) {
                _writer_.writeString(1, mapPoiId);
            }
            if (appId != null) {
                _writer_.writeUInt32(2, appId);
            }
            if (userName != null) {
                _writer_.writeString(3, userName);
            }
            if (redirectUrl != null) {
                _writer_.writeString(4, redirectUrl);
            }
            if (showType != null) {
                _writer_.writeUInt32(5, showType);
            }
            if (score != null) {
                _writer_.writeUInt32(6, score);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                mapPoiId = _reader_.readString();
            } else if (_field_ == 2) {
                appId = _reader_.readUInt32();
            } else if (_field_ == 3) {
                userName = _reader_.readString();
            } else if (_field_ == 4) {
                redirectUrl = _reader_.readString();
            } else if (_field_ == 5) {
                showType = _reader_.readUInt32();
            } else if (_field_ == 6) {
                score = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class SnsPostRequest extends ProtoMessage {

        public final ProtoList<SKBuiltinString_t> withUserList = new ProtoList<SKBuiltinString_t>(false);//optional(4)--SKBuiltinString_t
        public final ProtoList<SnsGroup> groupIds = new ProtoList<SnsGroup>(false);//optional(10)--SnsGroup
        public final ProtoList<SKBuiltinString_t> blackList = new ProtoList<SKBuiltinString_t>(false);//optional(14)--SKBuiltinString_t
        public final ProtoList<SKBuiltinString_t> groupUser = new ProtoList<SKBuiltinString_t>(false);//optional(17)--SKBuiltinString_t
        public final ProtoList<SnsWeAppInfo> weAppInfo = new ProtoList<SnsWeAppInfo>(false);//optional(26)--SnsWeAppInfo
        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public SKBuiltinBuffer_t objectDesc = null;//required(2)--SKBuiltinBuffer_t
        public Integer withUserListCount = null;//optional(3)--uint32
        public Integer privacy = null;//optional(5)--uint32
        public Integer syncFlag = null;//optional(6)--uint32
        public String clientId = null;//optional(7)--string
        public Integer postBGImgType = null;//optional(8)--uint32
        public Integer groupCount = null;//optional(9)--uint32
        public Integer objectSource = null;//optional(11)--uint32
        public Long referId = null;//optional(12)--uint64
        public Integer blackListCount = null;//optional(13)--uint32
        public TwitterInfo twitterInfo = null;//optional(15)--TwitterInfo
        public Integer groupUserCount = null;//optional(16)--uint32
        public SnsPostCtocUploadInfo ctocUploadInfo = null;//optional(18)--SnsPostCtocUploadInfo
        public SnsPostOperationFields snsPostOperationFields = null;//optional(19)--SnsPostOperationFields
        public Integer mediaInfoCount = null;//optional(24)--int32
        public MediaInfo mediaInfo = null;//optional(25)--MediaInfo
        public SKBuiltinBuffer_t clientCheckDat = null;//optional(27)--SKBuiltinBuffer_t

        public static SnsPostRequest parse(byte[] data) {
            try {
                SnsPostRequest obj = new SnsPostRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeMessage(2, objectDesc);
            if (withUserListCount != null) {
                _writer_.writeUInt32(3, withUserListCount);
            }
            if (withUserList != null && !withUserList.isEmpty()) {
                _writer_.writeMessage(4, withUserList);
            }
            if (privacy != null) {
                _writer_.writeUInt32(5, privacy);
            }
            if (syncFlag != null) {
                _writer_.writeUInt32(6, syncFlag);
            }
            if (clientId != null) {
                _writer_.writeString(7, clientId);
            }
            if (postBGImgType != null) {
                _writer_.writeUInt32(8, postBGImgType);
            }
            if (groupCount != null) {
                _writer_.writeUInt32(9, groupCount);
            }
            if (groupIds != null && !groupIds.isEmpty()) {
                _writer_.writeMessage(10, groupIds);
            }
            if (objectSource != null) {
                _writer_.writeUInt32(11, objectSource);
            }
            if (referId != null) {
                _writer_.writeUInt64(12, referId);
            }
            if (blackListCount != null) {
                _writer_.writeUInt32(13, blackListCount);
            }
            if (blackList != null && !blackList.isEmpty()) {
                _writer_.writeMessage(14, blackList);
            }
            if (twitterInfo != null) {
                _writer_.writeMessage(15, twitterInfo);
            }
            if (groupUserCount != null) {
                _writer_.writeUInt32(16, groupUserCount);
            }
            if (groupUser != null && !groupUser.isEmpty()) {
                _writer_.writeMessage(17, groupUser);
            }
            if (ctocUploadInfo != null) {
                _writer_.writeMessage(18, ctocUploadInfo);
            }
            if (snsPostOperationFields != null) {
                _writer_.writeMessage(19, snsPostOperationFields);
            }
            if (mediaInfoCount != null) {
                _writer_.writeInt32(24, mediaInfoCount);
            }
            if (mediaInfo != null) {
                _writer_.writeMessage(25, mediaInfo);
            }
            if (weAppInfo != null && !weAppInfo.isEmpty()) {
                _writer_.writeMessage(26, weAppInfo);
            }
            if (clientCheckDat != null) {
                _writer_.writeMessage(27, clientCheckDat);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                objectDesc = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                withUserListCount = _reader_.readUInt32();
            } else if (_field_ == 4) {
                withUserList.add(SKBuiltinString_t.parse(_reader_.readByteArray()));
            } else if (_field_ == 5) {
                privacy = _reader_.readUInt32();
            } else if (_field_ == 6) {
                syncFlag = _reader_.readUInt32();
            } else if (_field_ == 7) {
                clientId = _reader_.readString();
            } else if (_field_ == 8) {
                postBGImgType = _reader_.readUInt32();
            } else if (_field_ == 9) {
                groupCount = _reader_.readUInt32();
            } else if (_field_ == 10) {
                groupIds.add(SnsGroup.parse(_reader_.readByteArray()));
            } else if (_field_ == 11) {
                objectSource = _reader_.readUInt32();
            } else if (_field_ == 12) {
                referId = _reader_.readUInt64();
            } else if (_field_ == 13) {
                blackListCount = _reader_.readUInt32();
            } else if (_field_ == 14) {
                blackList.add(SKBuiltinString_t.parse(_reader_.readByteArray()));
            } else if (_field_ == 15) {
                twitterInfo = TwitterInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 16) {
                groupUserCount = _reader_.readUInt32();
            } else if (_field_ == 17) {
                groupUser.add(SKBuiltinString_t.parse(_reader_.readByteArray()));
            } else if (_field_ == 18) {
                ctocUploadInfo = SnsPostCtocUploadInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 19) {
                snsPostOperationFields = SnsPostOperationFields.parse(_reader_.readByteArray());
            } else if (_field_ == 24) {
                mediaInfoCount = _reader_.readInt32();
            } else if (_field_ == 25) {
                mediaInfo = MediaInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 26) {
                weAppInfo.add(SnsWeAppInfo.parse(_reader_.readByteArray()));
            } else if (_field_ == 27) {
                clientCheckDat = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, objectDesc);
        }

    }

    public static class SnsPostResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public SnsObject snsObject = null;//required(2)--SnsObject

        public static SnsPostResponse parse(byte[] data) {
            try {
                SnsPostResponse obj = new SnsPostResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeMessage(2, snsObject);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                snsObject = SnsObject.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, snsObject);
        }

    }

    public static class SnsAction extends ProtoMessage {

        public String fromUsername = null;//optional(1)--string
        public String toUsername = null;//optional(2)--string
        public String fromNickname = null;//optional(3)--string
        public String toNickname = null;//optional(4)--string
        public Integer type = null;//required(5)--uint32
        public Integer source = null;//required(6)--uint32
        public Integer createTime = null;//optional(7)--uint32
        public String content = null;//optional(8)--string
        public Integer replyCommentId = null;//optional(9)--int32
        public Integer commentId = null;//optional(10)--int32
        public Integer isNotRichText = null;//optional(11)--uint32
        public Long replyCommentId2 = null;//optional(12)--uint64
        public Long commentId2 = null;//optional(13)--uint64

        public static SnsAction parse(byte[] data) {
            try {
                SnsAction obj = new SnsAction();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (fromUsername != null) {
                _writer_.writeString(1, fromUsername);
            }
            if (toUsername != null) {
                _writer_.writeString(2, toUsername);
            }
            if (fromNickname != null) {
                _writer_.writeString(3, fromNickname);
            }
            if (toNickname != null) {
                _writer_.writeString(4, toNickname);
            }
            _writer_.writeUInt32(5, type);
            _writer_.writeUInt32(6, source);
            if (createTime != null) {
                _writer_.writeUInt32(7, createTime);
            }
            if (content != null) {
                _writer_.writeString(8, content);
            }
            if (replyCommentId != null) {
                _writer_.writeInt32(9, replyCommentId);
            }
            if (commentId != null) {
                _writer_.writeInt32(10, commentId);
            }
            if (isNotRichText != null) {
                _writer_.writeUInt32(11, isNotRichText);
            }
            if (replyCommentId2 != null) {
                _writer_.writeUInt64(12, replyCommentId2);
            }
            if (commentId2 != null) {
                _writer_.writeUInt64(13, commentId2);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                fromUsername = _reader_.readString();
            } else if (_field_ == 2) {
                toUsername = _reader_.readString();
            } else if (_field_ == 3) {
                fromNickname = _reader_.readString();
            } else if (_field_ == 4) {
                toNickname = _reader_.readString();
            } else if (_field_ == 5) {
                type = _reader_.readUInt32();
            } else if (_field_ == 6) {
                source = _reader_.readUInt32();
            } else if (_field_ == 7) {
                createTime = _reader_.readUInt32();
            } else if (_field_ == 8) {
                content = _reader_.readString();
            } else if (_field_ == 9) {
                replyCommentId = _reader_.readInt32();
            } else if (_field_ == 10) {
                commentId = _reader_.readInt32();
            } else if (_field_ == 11) {
                isNotRichText = _reader_.readUInt32();
            } else if (_field_ == 12) {
                replyCommentId2 = _reader_.readUInt64();
            } else if (_field_ == 13) {
                commentId2 = _reader_.readUInt64();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(type, source);
        }

    }

    public static class SnsActionGroup extends ProtoMessage {

        public Long id = null;//required(1)--uint64
        public Long parentId = null;//optional(2)--uint64
        public SnsAction currentAction = null;//required(3)--SnsAction
        public SnsAction referAction = null;//optional(4)--SnsAction
        public String clientId = null;//optional(5)--string

        public static SnsActionGroup parse(byte[] data) {
            try {
                SnsActionGroup obj = new SnsActionGroup();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt64(1, id);
            if (parentId != null) {
                _writer_.writeUInt64(2, parentId);
            }
            _writer_.writeMessage(3, currentAction);
            if (referAction != null) {
                _writer_.writeMessage(4, referAction);
            }
            if (clientId != null) {
                _writer_.writeString(5, clientId);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                id = _reader_.readUInt64();
            } else if (_field_ == 2) {
                parentId = _reader_.readUInt64();
            } else if (_field_ == 3) {
                currentAction = SnsAction.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                referAction = SnsAction.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                clientId = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(id, currentAction);
        }

    }

    public static class SnsCommentRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public SnsActionGroup action = null;//required(2)--SnsActionGroup
        public String clientId = null;//optional(3)--string

        public static SnsCommentRequest parse(byte[] data) {
            try {
                SnsCommentRequest obj = new SnsCommentRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeMessage(2, action);
            if (clientId != null) {
                _writer_.writeString(3, clientId);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                action = SnsActionGroup.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                clientId = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, action);
        }

    }

    public static class SnsCommentResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public SnsObject snsObject = null;//required(2)--SnsObject

        public static SnsCommentResponse parse(byte[] data) {
            try {
                SnsCommentResponse obj = new SnsCommentResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeMessage(2, snsObject);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                snsObject = SnsObject.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, snsObject);
        }

    }

    public static class SetChatRoomAnnouncementRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public String chatRoomName = null;//optional(2)--string
        public String announcement = null;//optional(3)--string
        public Integer setAnnouncementFlag = null;//optional(4)--uint32

        public static SetChatRoomAnnouncementRequest parse(byte[] data) {
            try {
                SetChatRoomAnnouncementRequest obj = new SetChatRoomAnnouncementRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            if (chatRoomName != null) {
                _writer_.writeString(2, chatRoomName);
            }
            if (announcement != null) {
                _writer_.writeString(3, announcement);
            }
            if (setAnnouncementFlag != null) {
                _writer_.writeUInt32(4, setAnnouncementFlag);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                chatRoomName = _reader_.readString();
            } else if (_field_ == 3) {
                announcement = _reader_.readString();
            } else if (_field_ == 4) {
                setAnnouncementFlag = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest);
        }

    }

    public static class SearchContactRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public SKBuiltinString_t userName = null;//required(2)--SKBuiltinString_t
        public Integer opCode = null;//optional(3)--uint32
        public SKBuiltinBuffer_t reqBuf = null;//optional(4)--SKBuiltinBuffer_t
        public Integer fromScene = null;//optional(5)--uint32
        public Integer searchScene = null;//optional(6)--uint32

        public static SearchContactRequest parse(byte[] data) {
            try {
                SearchContactRequest obj = new SearchContactRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeMessage(2, userName);
            if (opCode != null) {
                _writer_.writeUInt32(3, opCode);
            }
            if (reqBuf != null) {
                _writer_.writeMessage(4, reqBuf);
            }
            if (fromScene != null) {
                _writer_.writeUInt32(5, fromScene);
            }
            if (searchScene != null) {
                _writer_.writeUInt32(6, searchScene);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                userName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                opCode = _reader_.readUInt32();
            } else if (_field_ == 4) {
                reqBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                fromScene = _reader_.readUInt32();
            } else if (_field_ == 6) {
                searchScene = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, userName);
        }

    }

    public static class SearchContactResponse extends ProtoMessage {

        public final ProtoList<SearchContactItem> contactList = new ProtoList<SearchContactItem>(false);//optional(26)--SearchContactItem
        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public SKBuiltinString_t userName = null;//required(2)--SKBuiltinString_t
        public SKBuiltinString_t nickName = null;//required(3)--SKBuiltinString_t
        public SKBuiltinString_t pYInitial = null;//required(4)--SKBuiltinString_t
        public SKBuiltinString_t quanPin = null;//required(5)--SKBuiltinString_t
        public Integer sex = null;//required(6)--int32
        public SKBuiltinBuffer_t imgBuf = null;//required(7)--SKBuiltinBuffer_t
        public String province = null;//optional(8)--string
        public String city = null;//optional(9)--string
        public String signature = null;//optional(10)--string
        public Integer personalCard = null;//optional(11)--uint32
        public Integer verifyFlag = null;//optional(12)--uint32
        public String verifyInfo = null;//optional(13)--string
        public String weibo = null;//optional(14)--string
        public String alias = null;//optional(15)--string
        public String weiboNickname = null;//optional(16)--string
        public Integer weiboFlag = null;//optional(17)--uint32
        public Integer albumStyle = null;//optional(18)--int32
        public Integer albumFlag = null;//optional(19)--int32
        public String albumBGImgID = null;//optional(20)--string
        public SnsUserInfo snsUserInfo = null;//optional(21)--SnsUserInfo
        public String country = null;//optional(22)--string
        public String myBrandList = null;//optional(23)--string
        public CustomizedInfo customizedInfo = null;//optional(24)--CustomizedInfo
        public Integer contactCount = null;//optional(25)--uint32
        public String bigHeadImgUrl = null;//optional(27)--string
        public String smallHeadImgUrl = null;//optional(28)--string
        public SKBuiltinBuffer_t resBuf = null;//optional(29)--SKBuiltinBuffer_t
        public String antispamTicket = null;//optional(30)--string
        public String kFWorkerID = null;//optional(31)--string
        public Integer matchType = null;//optional(32)--uint32

        public static SearchContactResponse parse(byte[] data) {
            try {
                SearchContactResponse obj = new SearchContactResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeMessage(2, userName);
            _writer_.writeMessage(3, nickName);
            _writer_.writeMessage(4, pYInitial);
            _writer_.writeMessage(5, quanPin);
            _writer_.writeInt32(6, sex);
            _writer_.writeMessage(7, imgBuf);
            if (province != null) {
                _writer_.writeString(8, province);
            }
            if (city != null) {
                _writer_.writeString(9, city);
            }
            if (signature != null) {
                _writer_.writeString(10, signature);
            }
            if (personalCard != null) {
                _writer_.writeUInt32(11, personalCard);
            }
            if (verifyFlag != null) {
                _writer_.writeUInt32(12, verifyFlag);
            }
            if (verifyInfo != null) {
                _writer_.writeString(13, verifyInfo);
            }
            if (weibo != null) {
                _writer_.writeString(14, weibo);
            }
            if (alias != null) {
                _writer_.writeString(15, alias);
            }
            if (weiboNickname != null) {
                _writer_.writeString(16, weiboNickname);
            }
            if (weiboFlag != null) {
                _writer_.writeUInt32(17, weiboFlag);
            }
            if (albumStyle != null) {
                _writer_.writeInt32(18, albumStyle);
            }
            if (albumFlag != null) {
                _writer_.writeInt32(19, albumFlag);
            }
            if (albumBGImgID != null) {
                _writer_.writeString(20, albumBGImgID);
            }
            if (snsUserInfo != null) {
                _writer_.writeMessage(21, snsUserInfo);
            }
            if (country != null) {
                _writer_.writeString(22, country);
            }
            if (myBrandList != null) {
                _writer_.writeString(23, myBrandList);
            }
            if (customizedInfo != null) {
                _writer_.writeMessage(24, customizedInfo);
            }
            if (contactCount != null) {
                _writer_.writeUInt32(25, contactCount);
            }
            if (contactList != null && !contactList.isEmpty()) {
                _writer_.writeMessage(26, contactList);
            }
            if (bigHeadImgUrl != null) {
                _writer_.writeString(27, bigHeadImgUrl);
            }
            if (smallHeadImgUrl != null) {
                _writer_.writeString(28, smallHeadImgUrl);
            }
            if (resBuf != null) {
                _writer_.writeMessage(29, resBuf);
            }
            if (antispamTicket != null) {
                _writer_.writeString(30, antispamTicket);
            }
            if (kFWorkerID != null) {
                _writer_.writeString(31, kFWorkerID);
            }
            if (matchType != null) {
                _writer_.writeUInt32(32, matchType);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                userName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                nickName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                pYInitial = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                quanPin = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 6) {
                sex = _reader_.readInt32();
            } else if (_field_ == 7) {
                imgBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 8) {
                province = _reader_.readString();
            } else if (_field_ == 9) {
                city = _reader_.readString();
            } else if (_field_ == 10) {
                signature = _reader_.readString();
            } else if (_field_ == 11) {
                personalCard = _reader_.readUInt32();
            } else if (_field_ == 12) {
                verifyFlag = _reader_.readUInt32();
            } else if (_field_ == 13) {
                verifyInfo = _reader_.readString();
            } else if (_field_ == 14) {
                weibo = _reader_.readString();
            } else if (_field_ == 15) {
                alias = _reader_.readString();
            } else if (_field_ == 16) {
                weiboNickname = _reader_.readString();
            } else if (_field_ == 17) {
                weiboFlag = _reader_.readUInt32();
            } else if (_field_ == 18) {
                albumStyle = _reader_.readInt32();
            } else if (_field_ == 19) {
                albumFlag = _reader_.readInt32();
            } else if (_field_ == 20) {
                albumBGImgID = _reader_.readString();
            } else if (_field_ == 21) {
                snsUserInfo = SnsUserInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 22) {
                country = _reader_.readString();
            } else if (_field_ == 23) {
                myBrandList = _reader_.readString();
            } else if (_field_ == 24) {
                customizedInfo = CustomizedInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 25) {
                contactCount = _reader_.readUInt32();
            } else if (_field_ == 26) {
                contactList.add(SearchContactItem.parse(_reader_.readByteArray()));
            } else if (_field_ == 27) {
                bigHeadImgUrl = _reader_.readString();
            } else if (_field_ == 28) {
                smallHeadImgUrl = _reader_.readString();
            } else if (_field_ == 29) {
                resBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 30) {
                antispamTicket = _reader_.readString();
            } else if (_field_ == 31) {
                kFWorkerID = _reader_.readString();
            } else if (_field_ == 32) {
                matchType = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, userName, nickName, pYInitial, quanPin, sex, imgBuf);
        }

    }

    public static class SearchContactItem extends ProtoMessage {

        public SKBuiltinString_t userName = null;//required(1)--SKBuiltinString_t
        public SKBuiltinString_t nickName = null;//required(2)--SKBuiltinString_t
        public SKBuiltinString_t pYInitial = null;//required(3)--SKBuiltinString_t
        public SKBuiltinString_t quanPin = null;//required(4)--SKBuiltinString_t
        public Integer sex = null;//required(5)--int32
        public SKBuiltinBuffer_t imgBuf = null;//required(6)--SKBuiltinBuffer_t
        public String province = null;//optional(7)--string
        public String city = null;//optional(8)--string
        public String signature = null;//optional(9)--string
        public Integer personalCard = null;//optional(10)--uint32
        public Integer verifyFlag = null;//optional(11)--uint32
        public String verifyInfo = null;//optional(12)--string
        public String weibo = null;//optional(13)--string
        public String alias = null;//optional(14)--string
        public String weiboNickname = null;//optional(15)--string
        public Integer weiboFlag = null;//optional(16)--uint32
        public Integer albumStyle = null;//optional(17)--int32
        public Integer albumFlag = null;//optional(18)--int32
        public String albumBGImgID = null;//optional(19)--string
        public SnsUserInfo snsUserInfo = null;//optional(20)--SnsUserInfo
        public String country = null;//optional(21)--string
        public String myBrandList = null;//optional(22)--string
        public CustomizedInfo customizedInfo = null;//optional(23)--CustomizedInfo
        public String bigHeadImgUrl = null;//optional(24)--string
        public String smallHeadImgUrl = null;//optional(25)--string
        public String antispamTicket = null;//optional(26)--string
        public Integer matchType = null;//optional(27)--uint32

        public static SearchContactItem parse(byte[] data) {
            try {
                SearchContactItem obj = new SearchContactItem();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, userName);
            _writer_.writeMessage(2, nickName);
            _writer_.writeMessage(3, pYInitial);
            _writer_.writeMessage(4, quanPin);
            _writer_.writeInt32(5, sex);
            _writer_.writeMessage(6, imgBuf);
            if (province != null) {
                _writer_.writeString(7, province);
            }
            if (city != null) {
                _writer_.writeString(8, city);
            }
            if (signature != null) {
                _writer_.writeString(9, signature);
            }
            if (personalCard != null) {
                _writer_.writeUInt32(10, personalCard);
            }
            if (verifyFlag != null) {
                _writer_.writeUInt32(11, verifyFlag);
            }
            if (verifyInfo != null) {
                _writer_.writeString(12, verifyInfo);
            }
            if (weibo != null) {
                _writer_.writeString(13, weibo);
            }
            if (alias != null) {
                _writer_.writeString(14, alias);
            }
            if (weiboNickname != null) {
                _writer_.writeString(15, weiboNickname);
            }
            if (weiboFlag != null) {
                _writer_.writeUInt32(16, weiboFlag);
            }
            if (albumStyle != null) {
                _writer_.writeInt32(17, albumStyle);
            }
            if (albumFlag != null) {
                _writer_.writeInt32(18, albumFlag);
            }
            if (albumBGImgID != null) {
                _writer_.writeString(19, albumBGImgID);
            }
            if (snsUserInfo != null) {
                _writer_.writeMessage(20, snsUserInfo);
            }
            if (country != null) {
                _writer_.writeString(21, country);
            }
            if (myBrandList != null) {
                _writer_.writeString(22, myBrandList);
            }
            if (customizedInfo != null) {
                _writer_.writeMessage(23, customizedInfo);
            }
            if (bigHeadImgUrl != null) {
                _writer_.writeString(24, bigHeadImgUrl);
            }
            if (smallHeadImgUrl != null) {
                _writer_.writeString(25, smallHeadImgUrl);
            }
            if (antispamTicket != null) {
                _writer_.writeString(26, antispamTicket);
            }
            if (matchType != null) {
                _writer_.writeUInt32(27, matchType);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                userName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                nickName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                pYInitial = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                quanPin = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                sex = _reader_.readInt32();
            } else if (_field_ == 6) {
                imgBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 7) {
                province = _reader_.readString();
            } else if (_field_ == 8) {
                city = _reader_.readString();
            } else if (_field_ == 9) {
                signature = _reader_.readString();
            } else if (_field_ == 10) {
                personalCard = _reader_.readUInt32();
            } else if (_field_ == 11) {
                verifyFlag = _reader_.readUInt32();
            } else if (_field_ == 12) {
                verifyInfo = _reader_.readString();
            } else if (_field_ == 13) {
                weibo = _reader_.readString();
            } else if (_field_ == 14) {
                alias = _reader_.readString();
            } else if (_field_ == 15) {
                weiboNickname = _reader_.readString();
            } else if (_field_ == 16) {
                weiboFlag = _reader_.readUInt32();
            } else if (_field_ == 17) {
                albumStyle = _reader_.readInt32();
            } else if (_field_ == 18) {
                albumFlag = _reader_.readInt32();
            } else if (_field_ == 19) {
                albumBGImgID = _reader_.readString();
            } else if (_field_ == 20) {
                snsUserInfo = SnsUserInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 21) {
                country = _reader_.readString();
            } else if (_field_ == 22) {
                myBrandList = _reader_.readString();
            } else if (_field_ == 23) {
                customizedInfo = CustomizedInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 24) {
                bigHeadImgUrl = _reader_.readString();
            } else if (_field_ == 25) {
                smallHeadImgUrl = _reader_.readString();
            } else if (_field_ == 26) {
                antispamTicket = _reader_.readString();
            } else if (_field_ == 27) {
                matchType = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(userName, nickName, pYInitial, quanPin, sex, imgBuf);
        }

    }

    public static class SetChatRoomAnnouncementResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse

        public static SetChatRoomAnnouncementResponse parse(byte[] data) {
            try {
                SetChatRoomAnnouncementResponse obj = new SetChatRoomAnnouncementResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse);
        }

    }

    public static class VerifyUser extends ProtoMessage {

        public String value = null;//optional(1)--string
        public String verifyUserTicket = null;//optional(2)--string
        public String antispamTicket = null;//optional(3)--string
        public Integer friendFlag = null;//optional(4)--uint32
        public String chatRoomUserName = null;//optional(5)--string
        public String sourceUserName = null;//optional(6)--string
        public String sourceNickName = null;//optional(7)--string
        public Integer unknown8 = null;//optional(8)--uint32

        public static VerifyUser parse(byte[] data) {
            try {
                VerifyUser obj = new VerifyUser();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (value != null) {
                _writer_.writeString(1, value);
            }
            if (verifyUserTicket != null) {
                _writer_.writeString(2, verifyUserTicket);
            }
            if (antispamTicket != null) {
                _writer_.writeString(3, antispamTicket);
            }
            if (friendFlag != null) {
                _writer_.writeUInt32(4, friendFlag);
            }
            if (chatRoomUserName != null) {
                _writer_.writeString(5, chatRoomUserName);
            }
            if (sourceUserName != null) {
                _writer_.writeString(6, sourceUserName);
            }
            if (sourceNickName != null) {
                _writer_.writeString(7, sourceNickName);
            }
            if (unknown8 != null) {
                _writer_.writeUInt32(8, unknown8);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                value = _reader_.readString();
            } else if (_field_ == 2) {
                verifyUserTicket = _reader_.readString();
            } else if (_field_ == 3) {
                antispamTicket = _reader_.readString();
            } else if (_field_ == 4) {
                friendFlag = _reader_.readUInt32();
            } else if (_field_ == 5) {
                chatRoomUserName = _reader_.readString();
            } else if (_field_ == 6) {
                sourceUserName = _reader_.readString();
            } else if (_field_ == 7) {
                sourceNickName = _reader_.readString();
            } else if (_field_ == 8) {
                unknown8 = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class VerifyUserRequest extends ProtoMessage {

        public final ProtoList<VerifyUser> verifyUserList = new ProtoList<VerifyUser>(false);//optional(4)--VerifyUser
        public final ProtoList<VerifyUserInfo> verifyInfoList = new ProtoList<VerifyUserInfo>(false);//optional(9)--VerifyUserInfo
        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public Integer opcode = null;//required(2)--uint32
        public Integer verifyUserListSize = null;//required(3)--uint32
        public String verifyContent = null;//optional(5)--string
        public Integer sceneTag = null;//optional(6)--uint32
        public byte[] sceneData = null;//optional(7)--bytes
        public Integer verifyInfoListCount = null;//optional(8)--uint32

        public static VerifyUserRequest parse(byte[] data) {
            try {
                VerifyUserRequest obj = new VerifyUserRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeUInt32(2, opcode);
            _writer_.writeUInt32(3, verifyUserListSize);
            if (verifyUserList != null && !verifyUserList.isEmpty()) {
                _writer_.writeMessage(4, verifyUserList);
            }
            if (verifyContent != null) {
                _writer_.writeString(5, verifyContent);
            }
            if (sceneTag != null) {
                _writer_.writeUInt32(6, sceneTag);
            }
            if (sceneData != null) {
                _writer_.writeByteArray(7, sceneData);
            }
            if (verifyInfoListCount != null) {
                _writer_.writeUInt32(8, verifyInfoListCount);
            }
            if (verifyInfoList != null && !verifyInfoList.isEmpty()) {
                _writer_.writeMessage(9, verifyInfoList);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                opcode = _reader_.readUInt32();
            } else if (_field_ == 3) {
                verifyUserListSize = _reader_.readUInt32();
            } else if (_field_ == 4) {
                verifyUserList.add(VerifyUser.parse(_reader_.readByteArray()));
            } else if (_field_ == 5) {
                verifyContent = _reader_.readString();
            } else if (_field_ == 6) {
                sceneTag = _reader_.readUInt32();
            } else if (_field_ == 7) {
                sceneData = _reader_.readByteArray();
            } else if (_field_ == 8) {
                verifyInfoListCount = _reader_.readUInt32();
            } else if (_field_ == 9) {
                verifyInfoList.add(VerifyUserInfo.parse(_reader_.readByteArray()));
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, opcode, verifyUserListSize);
        }

    }

    public static class VerifyUserInfo extends ProtoMessage {

        public String key = null;//optional(1)--string
        public String value = null;//optional(2)--string

        public static VerifyUserInfo parse(byte[] data) {
            try {
                VerifyUserInfo obj = new VerifyUserInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (key != null) {
                _writer_.writeString(1, key);
            }
            if (value != null) {
                _writer_.writeString(2, value);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                key = _reader_.readString();
            } else if (_field_ == 2) {
                value = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

    public static class UploadMsgImgRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public SKBuiltinString_t clientImgId = null;//required(2)--SKBuiltinString_t
        public SKBuiltinString_t fromUserName = null;//required(3)--SKBuiltinString_t
        public SKBuiltinString_t toUserName = null;//required(4)--SKBuiltinString_t
        public Integer totalLen = null;//required(5)--uint32
        public Integer startPos = null;//required(6)--uint32
        public Integer dataLen = null;//required(7)--uint32
        public SKBuiltinBuffer_t data = null;//required(8)--SKBuiltinBuffer_t
        public Integer msgType = null;//optional(9)--uint32
        public String msgSource = null;//optional(10)--string
        public Integer compressType = null;//optional(11)--uint32
        public Integer netType = null;//optional(12)--int32
        public Integer photoFrom = null;//optional(13)--int32
        public String mediaId = null;//optional(14)--string
        public String cdnBigImgUrl = null;//optional(15)--string
        public String cdnMidImgUrl = null;//optional(16)--string
        public String aesKey = null;//optional(17)--string
        public Integer encryptVer = null;//optional(18)--int32
        public Integer cdnBigImgSize = null;//optional(19)--int32
        public Integer cdnMidImgSize = null;//optional(20)--int32
        public String cdnThumbImgUrl = null;//optional(21)--string
        public Integer cdnThumbImgSize = null;//optional(22)--int32
        public Integer cdnThumbImgHeight = null;//optional(23)--int32
        public Integer cdnThumbImgWidth = null;//optional(24)--int32
        public String cdnThumbAesKey = null;//optional(25)--string
        public Integer reqTime = null;//optional(26)--uint32
        public String md5 = null;//optional(27)--string
        public Integer crc32 = null;//optional(28)--uint32
        public Integer msgForwardType = null;//optional(29)--uint32
        public Integer hitMd5 = null;//optional(30)--uint32

        public static UploadMsgImgRequest parse(byte[] data) {
            try {
                UploadMsgImgRequest obj = new UploadMsgImgRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeMessage(2, clientImgId);
            _writer_.writeMessage(3, fromUserName);
            _writer_.writeMessage(4, toUserName);
            _writer_.writeUInt32(5, totalLen);
            _writer_.writeUInt32(6, startPos);
            _writer_.writeUInt32(7, dataLen);
            _writer_.writeMessage(8, data);
            if (msgType != null) {
                _writer_.writeUInt32(9, msgType);
            }
            if (msgSource != null) {
                _writer_.writeString(10, msgSource);
            }
            if (compressType != null) {
                _writer_.writeUInt32(11, compressType);
            }
            if (netType != null) {
                _writer_.writeInt32(12, netType);
            }
            if (photoFrom != null) {
                _writer_.writeInt32(13, photoFrom);
            }
            if (mediaId != null) {
                _writer_.writeString(14, mediaId);
            }
            if (cdnBigImgUrl != null) {
                _writer_.writeString(15, cdnBigImgUrl);
            }
            if (cdnMidImgUrl != null) {
                _writer_.writeString(16, cdnMidImgUrl);
            }
            if (aesKey != null) {
                _writer_.writeString(17, aesKey);
            }
            if (encryptVer != null) {
                _writer_.writeInt32(18, encryptVer);
            }
            if (cdnBigImgSize != null) {
                _writer_.writeInt32(19, cdnBigImgSize);
            }
            if (cdnMidImgSize != null) {
                _writer_.writeInt32(20, cdnMidImgSize);
            }
            if (cdnThumbImgUrl != null) {
                _writer_.writeString(21, cdnThumbImgUrl);
            }
            if (cdnThumbImgSize != null) {
                _writer_.writeInt32(22, cdnThumbImgSize);
            }
            if (cdnThumbImgHeight != null) {
                _writer_.writeInt32(23, cdnThumbImgHeight);
            }
            if (cdnThumbImgWidth != null) {
                _writer_.writeInt32(24, cdnThumbImgWidth);
            }
            if (cdnThumbAesKey != null) {
                _writer_.writeString(25, cdnThumbAesKey);
            }
            if (reqTime != null) {
                _writer_.writeUInt32(26, reqTime);
            }
            if (md5 != null) {
                _writer_.writeString(27, md5);
            }
            if (crc32 != null) {
                _writer_.writeUInt32(28, crc32);
            }
            if (msgForwardType != null) {
                _writer_.writeUInt32(29, msgForwardType);
            }
            if (hitMd5 != null) {
                _writer_.writeUInt32(30, hitMd5);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                clientImgId = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                fromUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                toUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                totalLen = _reader_.readUInt32();
            } else if (_field_ == 6) {
                startPos = _reader_.readUInt32();
            } else if (_field_ == 7) {
                dataLen = _reader_.readUInt32();
            } else if (_field_ == 8) {
                data = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 9) {
                msgType = _reader_.readUInt32();
            } else if (_field_ == 10) {
                msgSource = _reader_.readString();
            } else if (_field_ == 11) {
                compressType = _reader_.readUInt32();
            } else if (_field_ == 12) {
                netType = _reader_.readInt32();
            } else if (_field_ == 13) {
                photoFrom = _reader_.readInt32();
            } else if (_field_ == 14) {
                mediaId = _reader_.readString();
            } else if (_field_ == 15) {
                cdnBigImgUrl = _reader_.readString();
            } else if (_field_ == 16) {
                cdnMidImgUrl = _reader_.readString();
            } else if (_field_ == 17) {
                aesKey = _reader_.readString();
            } else if (_field_ == 18) {
                encryptVer = _reader_.readInt32();
            } else if (_field_ == 19) {
                cdnBigImgSize = _reader_.readInt32();
            } else if (_field_ == 20) {
                cdnMidImgSize = _reader_.readInt32();
            } else if (_field_ == 21) {
                cdnThumbImgUrl = _reader_.readString();
            } else if (_field_ == 22) {
                cdnThumbImgSize = _reader_.readInt32();
            } else if (_field_ == 23) {
                cdnThumbImgHeight = _reader_.readInt32();
            } else if (_field_ == 24) {
                cdnThumbImgWidth = _reader_.readInt32();
            } else if (_field_ == 25) {
                cdnThumbAesKey = _reader_.readString();
            } else if (_field_ == 26) {
                reqTime = _reader_.readUInt32();
            } else if (_field_ == 27) {
                md5 = _reader_.readString();
            } else if (_field_ == 28) {
                crc32 = _reader_.readUInt32();
            } else if (_field_ == 29) {
                msgForwardType = _reader_.readUInt32();
            } else if (_field_ == 30) {
                hitMd5 = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, clientImgId, fromUserName, toUserName, totalLen, startPos, dataLen, data);
        }

    }

    public static class DelMemberResp extends ProtoMessage {

        public SKBuiltinString_t memberName = null;//required(1)--SKBuiltinString_t

        public static DelMemberResp parse(byte[] data) {
            try {
                DelMemberResp obj = new DelMemberResp();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, memberName);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                memberName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(memberName);
        }

    }

    public static class DelTalkRoomMemberRequest extends ProtoMessage {

        public final ProtoList<DelMemberReq> memberList = new ProtoList<DelMemberReq>(false);//optional(3)--DelMemberReq
        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public Integer memberCount = null;//required(2)--uint32
        public String talkRoomName = null;//optional(4)--string
        public Integer scene = null;//optional(5)--uint32

        public static DelTalkRoomMemberRequest parse(byte[] data) {
            try {
                DelTalkRoomMemberRequest obj = new DelTalkRoomMemberRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeUInt32(2, memberCount);
            if (memberList != null && !memberList.isEmpty()) {
                _writer_.writeMessage(3, memberList);
            }
            if (talkRoomName != null) {
                _writer_.writeString(4, talkRoomName);
            }
            if (scene != null) {
                _writer_.writeUInt32(5, scene);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                memberCount = _reader_.readUInt32();
            } else if (_field_ == 3) {
                memberList.add(DelMemberReq.parse(_reader_.readByteArray()));
            } else if (_field_ == 4) {
                talkRoomName = _reader_.readString();
            } else if (_field_ == 5) {
                scene = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, memberCount);
        }

    }

    public static class DelMemberReq extends ProtoMessage {

        public SKBuiltinString_t memberName = null;//required(1)--SKBuiltinString_t

        public static DelMemberReq parse(byte[] data) {
            try {
                DelMemberReq obj = new DelMemberReq();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, memberName);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                memberName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(memberName);
        }

    }

    public static class DelTalkRoomMemberResponse extends ProtoMessage {

        public final ProtoList<DelMemberResp> memberList = new ProtoList<DelMemberResp>(false);//optional(3)--DelMemberResp
        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public Integer memberCount = null;//required(2)--uint32

        public static DelTalkRoomMemberResponse parse(byte[] data) {
            try {
                DelTalkRoomMemberResponse obj = new DelTalkRoomMemberResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeUInt32(2, memberCount);
            if (memberList != null && !memberList.isEmpty()) {
                _writer_.writeMessage(3, memberList);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                memberCount = _reader_.readUInt32();
            } else if (_field_ == 3) {
                memberList.add(DelMemberResp.parse(_reader_.readByteArray()));
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, memberCount);
        }

    }

    public static class UploadMsgImgResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public Integer msgId = null;//required(2)--uint32
        public SKBuiltinString_t clientImgId = null;//required(3)--SKBuiltinString_t
        public SKBuiltinString_t fromUserName = null;//required(4)--SKBuiltinString_t
        public SKBuiltinString_t toUserName = null;//required(5)--SKBuiltinString_t
        public Integer totalLen = null;//required(6)--uint32
        public Integer startPos = null;//required(7)--uint32
        public Integer dataLen = null;//required(8)--uint32
        public Integer createTime = null;//required(9)--uint32
        public Long newMsgId = null;//optional(10)--uint64
        public String aesKey = null;//optional(11)--string
        public String fileId = null;//optional(12)--string

        public static UploadMsgImgResponse parse(byte[] data) {
            try {
                UploadMsgImgResponse obj = new UploadMsgImgResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeUInt32(2, msgId);
            _writer_.writeMessage(3, clientImgId);
            _writer_.writeMessage(4, fromUserName);
            _writer_.writeMessage(5, toUserName);
            _writer_.writeUInt32(6, totalLen);
            _writer_.writeUInt32(7, startPos);
            _writer_.writeUInt32(8, dataLen);
            _writer_.writeUInt32(9, createTime);
            if (newMsgId != null) {
                _writer_.writeUInt64(10, newMsgId);
            }
            if (aesKey != null) {
                _writer_.writeString(11, aesKey);
            }
            if (fileId != null) {
                _writer_.writeString(12, fileId);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                msgId = _reader_.readUInt32();
            } else if (_field_ == 3) {
                clientImgId = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                fromUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                toUserName = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else if (_field_ == 6) {
                totalLen = _reader_.readUInt32();
            } else if (_field_ == 7) {
                startPos = _reader_.readUInt32();
            } else if (_field_ == 8) {
                dataLen = _reader_.readUInt32();
            } else if (_field_ == 9) {
                createTime = _reader_.readUInt32();
            } else if (_field_ == 10) {
                newMsgId = _reader_.readUInt64();
            } else if (_field_ == 11) {
                aesKey = _reader_.readString();
            } else if (_field_ == 12) {
                fileId = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, msgId, clientImgId, fromUserName, toUserName, totalLen, startPos, dataLen, createTime);
        }

    }

    public static class UploadVideoRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public String clientMsgId = null;//optional(2)--string
        public String fromUserName = null;//optional(3)--string
        public String toUserName = null;//optional(4)--string
        public Integer thumbTotalLen = null;//required(5)--uint32
        public Integer thumbStartPos = null;//required(6)--uint32
        public SKBuiltinBuffer_t thumbData = null;//required(7)--SKBuiltinBuffer_t
        public Integer videoTotalLen = null;//required(8)--uint32
        public Integer videoStartPos = null;//required(9)--uint32
        public SKBuiltinBuffer_t videoData = null;//required(10)--SKBuiltinBuffer_t
        public Integer playLength = null;//required(11)--uint32
        public Integer networkEnv = null;//optional(12)--uint32
        public Integer cameraType = null;//optional(13)--uint32
        public Integer funcFlag = null;//optional(14)--uint32
        public String msgSource = null;//optional(15)--string
        public String cdnVideoUrl = null;//optional(16)--string
        public String aesKey = null;//optional(17)--string
        public Integer encryptVer = null;//optional(18)--int32
        public String cdnThumbUrl = null;//optional(19)--string
        public Integer cdnThumbImgSize = null;//optional(20)--int32
        public Integer cdnThumbImgHeight = null;//optional(21)--int32
        public Integer cdnThumbImgWidth = null;//optional(22)--int32
        public String cdnThumbAESKey = null;//optional(23)--string
        public Integer videoFrom = null;//optional(24)--int32
        public Integer reqTime = null;//optional(25)--uint32
        public String videoMd5 = null;//optional(26)--string
        public String streamVideoUrl = null;//optional(27)--string
        public Integer streamVideoTotalTime = null;//optional(28)--uint32
        public String streamVideoTitle = null;//optional(29)--string
        public String streamVideoWording = null;//optional(30)--string
        public String streamVideoWebUrl = null;//optional(31)--string
        public String streamVideoThumbUrl = null;//optional(32)--string
        public String streamVideoPublishId = null;//optional(33)--string
        public String streamVideoAdUxInfo = null;//optional(34)--string
        public String statExtStr = null;//optional(35)--string
        public Integer hitMd5 = null;//optional(36)--uint32
        public String videoNewMd5 = null;//optional(37)--string
        public Integer crc32 = null;//optional(38)--uint32
        public Integer msgForwardType = null;//optional(39)--uint32

        public static UploadVideoRequest parse(byte[] data) {
            try {
                UploadVideoRequest obj = new UploadVideoRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            if (clientMsgId != null) {
                _writer_.writeString(2, clientMsgId);
            }
            if (fromUserName != null) {
                _writer_.writeString(3, fromUserName);
            }
            if (toUserName != null) {
                _writer_.writeString(4, toUserName);
            }
            _writer_.writeUInt32(5, thumbTotalLen);
            _writer_.writeUInt32(6, thumbStartPos);
            _writer_.writeMessage(7, thumbData);
            _writer_.writeUInt32(8, videoTotalLen);
            _writer_.writeUInt32(9, videoStartPos);
            _writer_.writeMessage(10, videoData);
            _writer_.writeUInt32(11, playLength);
            if (networkEnv != null) {
                _writer_.writeUInt32(12, networkEnv);
            }
            if (cameraType != null) {
                _writer_.writeUInt32(13, cameraType);
            }
            if (funcFlag != null) {
                _writer_.writeUInt32(14, funcFlag);
            }
            if (msgSource != null) {
                _writer_.writeString(15, msgSource);
            }
            if (cdnVideoUrl != null) {
                _writer_.writeString(16, cdnVideoUrl);
            }
            if (aesKey != null) {
                _writer_.writeString(17, aesKey);
            }
            if (encryptVer != null) {
                _writer_.writeInt32(18, encryptVer);
            }
            if (cdnThumbUrl != null) {
                _writer_.writeString(19, cdnThumbUrl);
            }
            if (cdnThumbImgSize != null) {
                _writer_.writeInt32(20, cdnThumbImgSize);
            }
            if (cdnThumbImgHeight != null) {
                _writer_.writeInt32(21, cdnThumbImgHeight);
            }
            if (cdnThumbImgWidth != null) {
                _writer_.writeInt32(22, cdnThumbImgWidth);
            }
            if (cdnThumbAESKey != null) {
                _writer_.writeString(23, cdnThumbAESKey);
            }
            if (videoFrom != null) {
                _writer_.writeInt32(24, videoFrom);
            }
            if (reqTime != null) {
                _writer_.writeUInt32(25, reqTime);
            }
            if (videoMd5 != null) {
                _writer_.writeString(26, videoMd5);
            }
            if (streamVideoUrl != null) {
                _writer_.writeString(27, streamVideoUrl);
            }
            if (streamVideoTotalTime != null) {
                _writer_.writeUInt32(28, streamVideoTotalTime);
            }
            if (streamVideoTitle != null) {
                _writer_.writeString(29, streamVideoTitle);
            }
            if (streamVideoWording != null) {
                _writer_.writeString(30, streamVideoWording);
            }
            if (streamVideoWebUrl != null) {
                _writer_.writeString(31, streamVideoWebUrl);
            }
            if (streamVideoThumbUrl != null) {
                _writer_.writeString(32, streamVideoThumbUrl);
            }
            if (streamVideoPublishId != null) {
                _writer_.writeString(33, streamVideoPublishId);
            }
            if (streamVideoAdUxInfo != null) {
                _writer_.writeString(34, streamVideoAdUxInfo);
            }
            if (statExtStr != null) {
                _writer_.writeString(35, statExtStr);
            }
            if (hitMd5 != null) {
                _writer_.writeUInt32(36, hitMd5);
            }
            if (videoNewMd5 != null) {
                _writer_.writeString(37, videoNewMd5);
            }
            if (crc32 != null) {
                _writer_.writeUInt32(38, crc32);
            }
            if (msgForwardType != null) {
                _writer_.writeUInt32(39, msgForwardType);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                clientMsgId = _reader_.readString();
            } else if (_field_ == 3) {
                fromUserName = _reader_.readString();
            } else if (_field_ == 4) {
                toUserName = _reader_.readString();
            } else if (_field_ == 5) {
                thumbTotalLen = _reader_.readUInt32();
            } else if (_field_ == 6) {
                thumbStartPos = _reader_.readUInt32();
            } else if (_field_ == 7) {
                thumbData = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 8) {
                videoTotalLen = _reader_.readUInt32();
            } else if (_field_ == 9) {
                videoStartPos = _reader_.readUInt32();
            } else if (_field_ == 10) {
                videoData = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 11) {
                playLength = _reader_.readUInt32();
            } else if (_field_ == 12) {
                networkEnv = _reader_.readUInt32();
            } else if (_field_ == 13) {
                cameraType = _reader_.readUInt32();
            } else if (_field_ == 14) {
                funcFlag = _reader_.readUInt32();
            } else if (_field_ == 15) {
                msgSource = _reader_.readString();
            } else if (_field_ == 16) {
                cdnVideoUrl = _reader_.readString();
            } else if (_field_ == 17) {
                aesKey = _reader_.readString();
            } else if (_field_ == 18) {
                encryptVer = _reader_.readInt32();
            } else if (_field_ == 19) {
                cdnThumbUrl = _reader_.readString();
            } else if (_field_ == 20) {
                cdnThumbImgSize = _reader_.readInt32();
            } else if (_field_ == 21) {
                cdnThumbImgHeight = _reader_.readInt32();
            } else if (_field_ == 22) {
                cdnThumbImgWidth = _reader_.readInt32();
            } else if (_field_ == 23) {
                cdnThumbAESKey = _reader_.readString();
            } else if (_field_ == 24) {
                videoFrom = _reader_.readInt32();
            } else if (_field_ == 25) {
                reqTime = _reader_.readUInt32();
            } else if (_field_ == 26) {
                videoMd5 = _reader_.readString();
            } else if (_field_ == 27) {
                streamVideoUrl = _reader_.readString();
            } else if (_field_ == 28) {
                streamVideoTotalTime = _reader_.readUInt32();
            } else if (_field_ == 29) {
                streamVideoTitle = _reader_.readString();
            } else if (_field_ == 30) {
                streamVideoWording = _reader_.readString();
            } else if (_field_ == 31) {
                streamVideoWebUrl = _reader_.readString();
            } else if (_field_ == 32) {
                streamVideoThumbUrl = _reader_.readString();
            } else if (_field_ == 33) {
                streamVideoPublishId = _reader_.readString();
            } else if (_field_ == 34) {
                streamVideoAdUxInfo = _reader_.readString();
            } else if (_field_ == 35) {
                statExtStr = _reader_.readString();
            } else if (_field_ == 36) {
                hitMd5 = _reader_.readUInt32();
            } else if (_field_ == 37) {
                videoNewMd5 = _reader_.readString();
            } else if (_field_ == 38) {
                crc32 = _reader_.readUInt32();
            } else if (_field_ == 39) {
                msgForwardType = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, thumbTotalLen, thumbStartPos, thumbData, videoTotalLen, videoStartPos, videoData, playLength);
        }

    }

    public static class UploadVideoResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public String clientMsgId = null;//optional(2)--string
        public Integer msgId = null;//required(3)--uint32
        public Integer thumbStartPos = null;//required(4)--uint32
        public Integer videoStartPos = null;//required(5)--uint32
        public Long newMsgId = null;//optional(6)--uint64
        public String aesKey = null;//optional(7)--string

        public static UploadVideoResponse parse(byte[] data) {
            try {
                UploadVideoResponse obj = new UploadVideoResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            if (clientMsgId != null) {
                _writer_.writeString(2, clientMsgId);
            }
            _writer_.writeUInt32(3, msgId);
            _writer_.writeUInt32(4, thumbStartPos);
            _writer_.writeUInt32(5, videoStartPos);
            if (newMsgId != null) {
                _writer_.writeUInt64(6, newMsgId);
            }
            if (aesKey != null) {
                _writer_.writeString(7, aesKey);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                clientMsgId = _reader_.readString();
            } else if (_field_ == 3) {
                msgId = _reader_.readUInt32();
            } else if (_field_ == 4) {
                thumbStartPos = _reader_.readUInt32();
            } else if (_field_ == 5) {
                videoStartPos = _reader_.readUInt32();
            } else if (_field_ == 6) {
                newMsgId = _reader_.readUInt64();
            } else if (_field_ == 7) {
                aesKey = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, msgId, thumbStartPos, videoStartPos);
        }

    }

    public static class SnsUploadRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public Integer type = null;//required(2)--uint32
        public Integer startPos = null;//required(3)--uint32
        public Integer totalLen = null;//required(4)--uint32
        public SKBuiltinBuffer_t buffer = null;//required(5)--SKBuiltinBuffer_t
        public String clientId = null;//optional(6)--string
        public Integer filterStype = null;//optional(7)--uint32
        public Integer syncFlag = null;//optional(8)--uint32
        public String description = null;//optional(9)--string
        public Integer photoFrom = null;//optional(10)--int32
        public Integer netType = null;//optional(11)--int32
        public TwitterInfo twitterInfo = null;//optional(12)--TwitterInfo
        public String appId = null;//optional(13)--string
        public Integer extFlag = null;//optional(14)--uint32
        public String md5 = null;//optional(15)--string

        public static SnsUploadRequest parse(byte[] data) {
            try {
                SnsUploadRequest obj = new SnsUploadRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeUInt32(2, type);
            _writer_.writeUInt32(3, startPos);
            _writer_.writeUInt32(4, totalLen);
            _writer_.writeMessage(5, buffer);
            if (clientId != null) {
                _writer_.writeString(6, clientId);
            }
            if (filterStype != null) {
                _writer_.writeUInt32(7, filterStype);
            }
            if (syncFlag != null) {
                _writer_.writeUInt32(8, syncFlag);
            }
            if (description != null) {
                _writer_.writeString(9, description);
            }
            if (photoFrom != null) {
                _writer_.writeInt32(10, photoFrom);
            }
            if (netType != null) {
                _writer_.writeInt32(11, netType);
            }
            if (twitterInfo != null) {
                _writer_.writeMessage(12, twitterInfo);
            }
            if (appId != null) {
                _writer_.writeString(13, appId);
            }
            if (extFlag != null) {
                _writer_.writeUInt32(14, extFlag);
            }
            if (md5 != null) {
                _writer_.writeString(15, md5);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                type = _reader_.readUInt32();
            } else if (_field_ == 3) {
                startPos = _reader_.readUInt32();
            } else if (_field_ == 4) {
                totalLen = _reader_.readUInt32();
            } else if (_field_ == 5) {
                buffer = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 6) {
                clientId = _reader_.readString();
            } else if (_field_ == 7) {
                filterStype = _reader_.readUInt32();
            } else if (_field_ == 8) {
                syncFlag = _reader_.readUInt32();
            } else if (_field_ == 9) {
                description = _reader_.readString();
            } else if (_field_ == 10) {
                photoFrom = _reader_.readInt32();
            } else if (_field_ == 11) {
                netType = _reader_.readInt32();
            } else if (_field_ == 12) {
                twitterInfo = TwitterInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 13) {
                appId = _reader_.readString();
            } else if (_field_ == 14) {
                extFlag = _reader_.readUInt32();
            } else if (_field_ == 15) {
                md5 = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, type, startPos, totalLen, buffer);
        }

    }

    public static class VerifyUserResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public String userName = null;//optional(2)--string

        public static VerifyUserResponse parse(byte[] data) {
            try {
                VerifyUserResponse obj = new VerifyUserResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            if (userName != null) {
                _writer_.writeString(2, userName);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                userName = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse);
        }

    }

    public static class CDNDnsInfo extends ProtoMessage {

        public final ProtoList<SKBuiltinString_t> frontIPList = new ProtoList<SKBuiltinString_t>(false);//optional(6)--SKBuiltinString_t
        public final ProtoList<SKBuiltinString_t> zoneIPList = new ProtoList<SKBuiltinString_t>(false);//optional(11)--SKBuiltinString_t
        public Integer ver = null;//required(1)--uint32
        public Integer uin = null;//required(2)--uint32
        public Integer expireTime = null;//required(3)--uint32
        public Integer frontID = null;//required(4)--int32
        public Integer frontIPCount = null;//required(5)--int32
        public String zoneDomain = null;//optional(7)--string
        public SKBuiltinBuffer_t authKey = null;//required(8)--SKBuiltinBuffer_t
        public Integer zoneID = null;//required(9)--int32
        public Integer zoneIPCount = null;//required(10)--int32

        public static CDNDnsInfo parse(byte[] data) {
            try {
                CDNDnsInfo obj = new CDNDnsInfo();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeUInt32(1, ver);
            _writer_.writeUInt32(2, uin);
            _writer_.writeUInt32(3, expireTime);
            _writer_.writeInt32(4, frontID);
            _writer_.writeInt32(5, frontIPCount);
            if (frontIPList != null && !frontIPList.isEmpty()) {
                _writer_.writeMessage(6, frontIPList);
            }
            if (zoneDomain != null) {
                _writer_.writeString(7, zoneDomain);
            }
            _writer_.writeMessage(8, authKey);
            _writer_.writeInt32(9, zoneID);
            _writer_.writeInt32(10, zoneIPCount);
            if (zoneIPList != null && !zoneIPList.isEmpty()) {
                _writer_.writeMessage(11, zoneIPList);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                ver = _reader_.readUInt32();
            } else if (_field_ == 2) {
                uin = _reader_.readUInt32();
            } else if (_field_ == 3) {
                expireTime = _reader_.readUInt32();
            } else if (_field_ == 4) {
                frontID = _reader_.readInt32();
            } else if (_field_ == 5) {
                frontIPCount = _reader_.readInt32();
            } else if (_field_ == 6) {
                frontIPList.add(SKBuiltinString_t.parse(_reader_.readByteArray()));
            } else if (_field_ == 7) {
                zoneDomain = _reader_.readString();
            } else if (_field_ == 8) {
                authKey = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 9) {
                zoneID = _reader_.readInt32();
            } else if (_field_ == 10) {
                zoneIPCount = _reader_.readInt32();
            } else if (_field_ == 11) {
                zoneIPList.add(SKBuiltinString_t.parse(_reader_.readByteArray()));
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(ver, uin, expireTime, frontID, frontIPCount, authKey, zoneID, zoneIPCount);
        }

    }

    public static class HeartBeatRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public Integer timeStamp = null;//required(2)--uint32
        public SKBuiltinBuffer_t keyBuf = null;//optional(3)--SKBuiltinBuffer_t
        public SKBuiltinBuffer_t blueToothBroadCastContent = null;//optional(4)--SKBuiltinBuffer_t
        public Integer scene = null;//optional(5)--uint32

        public static HeartBeatRequest parse(byte[] data) {
            try {
                HeartBeatRequest obj = new HeartBeatRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeUInt32(2, timeStamp);
            if (keyBuf != null) {
                _writer_.writeMessage(3, keyBuf);
            }
            if (blueToothBroadCastContent != null) {
                _writer_.writeMessage(4, blueToothBroadCastContent);
            }
            if (scene != null) {
                _writer_.writeUInt32(5, scene);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                timeStamp = _reader_.readUInt32();
            } else if (_field_ == 3) {
                keyBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                blueToothBroadCastContent = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                scene = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, timeStamp);
        }

    }

    public static class HeartBeatResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public Integer nextTime = null;//required(2)--uint32
        public Integer selector = null;//optional(3)--uint32
        public SKBuiltinBuffer_t blueToothBroadCastContent = null;//optional(4)--SKBuiltinBuffer_t

        public static HeartBeatResponse parse(byte[] data) {
            try {
                HeartBeatResponse obj = new HeartBeatResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeUInt32(2, nextTime);
            if (selector != null) {
                _writer_.writeUInt32(3, selector);
            }
            if (blueToothBroadCastContent != null) {
                _writer_.writeMessage(4, blueToothBroadCastContent);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                nextTime = _reader_.readUInt32();
            } else if (_field_ == 3) {
                selector = _reader_.readUInt32();
            } else if (_field_ == 4) {
                blueToothBroadCastContent = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, nextTime);
        }

    }

    public static class GetCDNDnsRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public String clientIP = null;//optional(2)--string

        public static GetCDNDnsRequest parse(byte[] data) {
            try {
                GetCDNDnsRequest obj = new GetCDNDnsRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            if (clientIP != null) {
                _writer_.writeString(2, clientIP);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                clientIP = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest);
        }

    }

    public static class GetCDNDnsResponse extends ProtoMessage {

        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public CDNDnsInfo dnsInfo = null;//required(2)--CDNDnsInfo
        public CDNDnsInfo snsDnsInfo = null;//optional(3)--CDNDnsInfo
        public CDNDnsInfo appDnsInfo = null;//optional(4)--CDNDnsInfo
        public SKBuiltinBuffer_t cDNDnsRuleBuf = null;//optional(5)--SKBuiltinBuffer_t
        public SKBuiltinBuffer_t fakeCDNDnsRuleBuf = null;//optional(6)--SKBuiltinBuffer_t
        public CDNDnsInfo fakeDnsInfo = null;//optional(7)--CDNDnsInfo

        public static GetCDNDnsResponse parse(byte[] data) {
            try {
                GetCDNDnsResponse obj = new GetCDNDnsResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeMessage(2, dnsInfo);
            if (snsDnsInfo != null) {
                _writer_.writeMessage(3, snsDnsInfo);
            }
            if (appDnsInfo != null) {
                _writer_.writeMessage(4, appDnsInfo);
            }
            if (cDNDnsRuleBuf != null) {
                _writer_.writeMessage(5, cDNDnsRuleBuf);
            }
            if (fakeCDNDnsRuleBuf != null) {
                _writer_.writeMessage(6, fakeCDNDnsRuleBuf);
            }
            if (fakeDnsInfo != null) {
                _writer_.writeMessage(7, fakeDnsInfo);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                dnsInfo = CDNDnsInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 3) {
                snsDnsInfo = CDNDnsInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                appDnsInfo = CDNDnsInfo.parse(_reader_.readByteArray());
            } else if (_field_ == 5) {
                cDNDnsRuleBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 6) {
                fakeCDNDnsRuleBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 7) {
                fakeDnsInfo = CDNDnsInfo.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, dnsInfo);
        }

    }

    public static class SnsUploadResponse extends ProtoMessage {

        public final ProtoList<SnsBufferUrl> thumbUrls = new ProtoList<SnsBufferUrl>(false);//optional(7)--SnsBufferUrl
        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public Integer startPos = null;//required(2)--uint32
        public Integer totalLen = null;//required(3)--uint32
        public String clientId = null;//optional(4)--string
        public SnsBufferUrl bufferUrl = null;//required(5)--SnsBufferUrl
        public Integer thumbUrlCount = null;//required(6)--uint32
        public Long id = null;//required(8)--uint64
        public Integer type = null;//required(9)--uint32

        public static SnsUploadResponse parse(byte[] data) {
            try {
                SnsUploadResponse obj = new SnsUploadResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            _writer_.writeUInt32(2, startPos);
            _writer_.writeUInt32(3, totalLen);
            if (clientId != null) {
                _writer_.writeString(4, clientId);
            }
            _writer_.writeMessage(5, bufferUrl);
            _writer_.writeUInt32(6, thumbUrlCount);
            if (thumbUrls != null && !thumbUrls.isEmpty()) {
                _writer_.writeMessage(7, thumbUrls);
            }
            _writer_.writeUInt64(8, id);
            _writer_.writeUInt32(9, type);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                startPos = _reader_.readUInt32();
            } else if (_field_ == 3) {
                totalLen = _reader_.readUInt32();
            } else if (_field_ == 4) {
                clientId = _reader_.readString();
            } else if (_field_ == 5) {
                bufferUrl = SnsBufferUrl.parse(_reader_.readByteArray());
            } else if (_field_ == 6) {
                thumbUrlCount = _reader_.readUInt32();
            } else if (_field_ == 7) {
                thumbUrls.add(SnsBufferUrl.parse(_reader_.readByteArray()));
            } else if (_field_ == 8) {
                id = _reader_.readUInt64();
            } else if (_field_ == 9) {
                type = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, startPos, totalLen, bufferUrl, thumbUrlCount, id, type);
        }

    }

    public static class FacingCreateChatRoomRequest extends ProtoMessage {

        public BaseRequest baseRequest = null;//required(1)--BaseRequest
        public Integer opCode = null;//required(2)--uint32
        public String passWord = null;//optional(3)--string
        public Float longitude = null;//required(4)--float
        public Float latitude = null;//required(5)--float
        public Integer precision = null;//required(6)--int32
        public String macAddr = null;//optional(7)--string
        public String cellId = null;//optional(8)--string
        public Integer gPSSource = null;//optional(9)--int32
        public String ticket = null;//optional(10)--string

        public static FacingCreateChatRoomRequest parse(byte[] data) {
            try {
                FacingCreateChatRoomRequest obj = new FacingCreateChatRoomRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseRequest);
            _writer_.writeUInt32(2, opCode);
            if (passWord != null) {
                _writer_.writeString(3, passWord);
            }
            _writer_.writeFloat(4, longitude);
            _writer_.writeFloat(5, latitude);
            _writer_.writeInt32(6, precision);
            if (macAddr != null) {
                _writer_.writeString(7, macAddr);
            }
            if (cellId != null) {
                _writer_.writeString(8, cellId);
            }
            if (gPSSource != null) {
                _writer_.writeInt32(9, gPSSource);
            }
            if (ticket != null) {
                _writer_.writeString(10, ticket);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseRequest = BaseRequest.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                opCode = _reader_.readUInt32();
            } else if (_field_ == 3) {
                passWord = _reader_.readString();
            } else if (_field_ == 4) {
                longitude = _reader_.readFloat();
            } else if (_field_ == 5) {
                latitude = _reader_.readFloat();
            } else if (_field_ == 6) {
                precision = _reader_.readInt32();
            } else if (_field_ == 7) {
                macAddr = _reader_.readString();
            } else if (_field_ == 8) {
                cellId = _reader_.readString();
            } else if (_field_ == 9) {
                gPSSource = _reader_.readInt32();
            } else if (_field_ == 10) {
                ticket = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseRequest, opCode, longitude, latitude, precision);
        }

    }

    public static class FacingCreateChatRoomResponse extends ProtoMessage {

        public final ProtoList<FacingMember> memberList = new ProtoList<FacingMember>(false);//optional(4)--FacingMember
        public BaseResponse baseResponse = null;//required(1)--BaseResponse
        public String ticket = null;//optional(2)--string
        public Integer memberCount = null;//required(3)--uint32
        public String chatRoomName = null;//optional(5)--string

        public static FacingCreateChatRoomResponse parse(byte[] data) {
            try {
                FacingCreateChatRoomResponse obj = new FacingCreateChatRoomResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, baseResponse);
            if (ticket != null) {
                _writer_.writeString(2, ticket);
            }
            _writer_.writeUInt32(3, memberCount);
            if (memberList != null && !memberList.isEmpty()) {
                _writer_.writeMessage(4, memberList);
            }
            if (chatRoomName != null) {
                _writer_.writeString(5, chatRoomName);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                baseResponse = BaseResponse.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                ticket = _reader_.readString();
            } else if (_field_ == 3) {
                memberCount = _reader_.readUInt32();
            } else if (_field_ == 4) {
                memberList.add(FacingMember.parse(_reader_.readByteArray()));
            } else if (_field_ == 5) {
                chatRoomName = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(baseResponse, memberCount);
        }

    }

    public static class FacingMember extends ProtoMessage {

        public String userName = null;//optional(1)--string
        public String encodeUserName = null;//optional(2)--string
        public String nickName = null;//optional(3)--string
        public String smallImgUrl = null;//optional(4)--string
        public Integer status = null;//required(5)--uint32

        public static FacingMember parse(byte[] data) {
            try {
                FacingMember obj = new FacingMember();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (userName != null) {
                _writer_.writeString(1, userName);
            }
            if (encodeUserName != null) {
                _writer_.writeString(2, encodeUserName);
            }
            if (nickName != null) {
                _writer_.writeString(3, nickName);
            }
            if (smallImgUrl != null) {
                _writer_.writeString(4, smallImgUrl);
            }
            _writer_.writeUInt32(5, status);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                userName = _reader_.readString();
            } else if (_field_ == 2) {
                encodeUserName = _reader_.readString();
            } else if (_field_ == 3) {
                nickName = _reader_.readString();
            } else if (_field_ == 4) {
                smallImgUrl = _reader_.readString();
            } else if (_field_ == 5) {
                status = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(status);
        }

    }

    public static class NewSyncRequest extends ProtoMessage {

        public CmdList oplog = null;//required(1)--CmdList
        public Integer selector = null;//required(2)--uint32
        public SKBuiltinBuffer_t keyBuf = null;//required(3)--SKBuiltinBuffer_t
        public Integer scene = null;//optional(4)--uint32
        public String deviceType = null;//optional(5)--string
        public Integer unknow6 = null;//optional(6)--int32

        public static NewSyncRequest parse(byte[] data) {
            try {
                NewSyncRequest obj = new NewSyncRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeMessage(1, oplog);
            _writer_.writeUInt32(2, selector);
            _writer_.writeMessage(3, keyBuf);
            if (scene != null) {
                _writer_.writeUInt32(4, scene);
            }
            if (deviceType != null) {
                _writer_.writeString(5, deviceType);
            }
            if (unknow6 != null) {
                _writer_.writeInt32(6, unknow6);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                oplog = CmdList.parse(_reader_.readByteArray());
            } else if (_field_ == 2) {
                selector = _reader_.readUInt32();
            } else if (_field_ == 3) {
                keyBuf = SKBuiltinBuffer_t.parse(_reader_.readByteArray());
            } else if (_field_ == 4) {
                scene = _reader_.readUInt32();
            } else if (_field_ == 5) {
                deviceType = _reader_.readString();
            } else if (_field_ == 6) {
                unknow6 = _reader_.readInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(oplog, selector, keyBuf);
        }

    }

    public static class BaseRequest extends ProtoMessage {
        public byte[] sessionKey = null;//required(1)--bytes
        public Long uin = null;//required(2)--uint32
        public byte[] deviceID = null;//required(3)--bytes
        public Integer clientVersion = null;//required(4)--int32
        public byte[] deviceType = null;//required(5)--bytes
        public Integer scene = null;//optional(6)--uint32
        public static BaseRequest parse(byte[] data) {
            try {
                BaseRequest obj = new BaseRequest();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeByteArray(1, sessionKey);
            _writer_.writeUInt64(2, uin);
            _writer_.writeByteArray(3, deviceID);
            _writer_.writeInt32(4, clientVersion);
            _writer_.writeByteArray(5, deviceType);
            if (scene != null) {
                _writer_.writeUInt32(6, scene);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                sessionKey = _reader_.readByteArray();
            } else if (_field_ == 2) {
                uin = _reader_.readUInt64();
            } else if (_field_ == 3) {
                deviceID = _reader_.readByteArray();
            } else if (_field_ == 4) {
                clientVersion = _reader_.readInt32();
            } else if (_field_ == 5) {
                deviceType = _reader_.readByteArray();
            } else if (_field_ == 6) {
                scene = _reader_.readUInt32();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(sessionKey, uin, deviceID, clientVersion, deviceType);
        }

    }

    public static class BaseResponse extends ProtoMessage {

        public Integer ret = null;//required(1)--int32
        public SKBuiltinString_t errMsg = null;//required(2)--SKBuiltinString_t

        public static BaseResponse parse(byte[] data) {
            try {
                BaseResponse obj = new BaseResponse();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeInt32(1, ret);
            _writer_.writeMessage(2, errMsg);
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                ret = _reader_.readInt32();
            } else if (_field_ == 2) {
                errMsg = SKBuiltinString_t.parse(_reader_.readByteArray());
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(ret, errMsg);
        }

    }

    public static class SKBuiltinBuffer_t extends ProtoMessage {

        public Integer len = null;//required(1)--int32
        public byte[] buffer = null;//optional(2)--bytes

        public static SKBuiltinBuffer_t parse(byte[] data) {
            try {
                SKBuiltinBuffer_t obj = new SKBuiltinBuffer_t();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            _writer_.writeInt32(1, len);
            if (buffer != null) {
                _writer_.writeByteArray(2, buffer);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                len = _reader_.readInt32();
            } else if (_field_ == 2) {
                buffer = _reader_.readByteArray();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return ProtoData.checkNotNull(len);
        }

    }

    public static class SKBuiltinString_t extends ProtoMessage {

        public String str = null;//optional(1)--string

        public static SKBuiltinString_t parse(byte[] data) {
            try {
                SKBuiltinString_t obj = new SKBuiltinString_t();
                new ProtoReader(data).solve(obj);
                return obj;
            } catch (ProtoException e) {
                return null;
            }
        }

        @Override
        public void write(ProtoWriter _writer_) {
            if (str != null) {
                _writer_.writeString(1, str);
            }
        }

        @Override
        public void read(ProtoReader _reader_, int _field_, int _type_) throws ProtoException {
            if (_field_ == 1) {
                str = _reader_.readString();
            } else {
                unknown(_reader_, _field_, _type_);
            }
        }

        public boolean check() {
            return true;
        }

    }

}

